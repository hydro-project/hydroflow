[package]
name = "hydroflow"
version = "0.1.0"
edition = "2021"

[features]
default = [ "async", "macros" ]
async = [ "futures", "futures-batch" ]
macros = [ "hydroflow_macro", "hydroflow_datalog" ]
hydroflow_macro = [ "dep:hydroflow_macro" ]
hydroflow_datalog = [ "dep:hydroflow_datalog" ]
cli_integration = [ "hydroflow_cli_integration", "async-trait" ]
kvs_bench = []

[dependencies]
bincode = "1.3"
byteorder = "1.4.3"
bytes = "1.1.0"
futures = { version = "0.3", optional = true }
futures-batch = { version = "0.6.1", optional = true }
hydroflow_datalog = { optional = true, path = "../hydroflow_datalog" }
hydroflow_lang = { path = "../hydroflow_lang" }
hydroflow_macro = { optional = true, path = "../hydroflow_macro" }
pusherator = { path = "../pusherator" }
ref-cast = "1.0"
regex = "1"
sealed = "0.4"
serde = { version = "1", features = [ "derive" ] }
serde_json = "1"
slotmap = "1.0"
static_assertions = "1.1.0"
tokio-stream = { version = "0.1.10", features = [ "io-util", "sync" ] }
variadics = { path = "../variadics" }
rustc-hash = "1.1.0"
hydroflow_cli_integration = { optional = true, path = "../hydroflow_cli_integration" }
async-trait = { version = "0.1", optional = true }
crdts = "7.2.0"
rand_distr = "0.4.3"
serde-big-array = "0.5.0"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tokio = { version = "1.16", features = [ "full" ] }
tokio-util = { version = "0.7.4", features = [ "net", "codec" ] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
tokio = { version = "1.16", features = [ "rt" , "sync", "macros", "io-util", "time" ] }
tokio-util = { version = "0.7.4", features = [ "codec" ] }
# We depend on getrandom transitively through rand. To compile getrandom to
# WASM, we need to enable its "js" feature. However, rand does not expose a
# passthrough to enable "js" on getrandom. As a workaround, we enable the
# getrandom js feature here; when the feature resolver computes the set of
# features for getrandom (unification), it will include "js".
getrandom = { version = "0.2.6", features = [ "js" ] }

[dev-dependencies]
chrono = { version = "0.4.20", features = [ "serde", "clock" ], default-features = false }
clap = { version = "4.1.8", features = [ "derive" ] }
colored = "2.0"
core_affinity = "0.5.10"
futures = { version = "0.3" }
insta = "1.7.1"
itertools = "0.10.3"
multiplatform_test = { path = "../multiplatform_test" }
wasm-bindgen-test-macro = "0.3.34"
wasm-bindgen-test = "0.3.34"
rand = {version = "0.8.4", features = ["small_rng"]}
textnonce = "1.0.0"
time = "0.3"
trybuild = "1.0.80"
hdrhistogram = "7"
zipf = "7.0.0"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
# Rayon (rust data-parallelism library) does not compile on WASM.
criterion = { version = "0.4", features = [ "async_tokio", "html_reports" ] }

[target.'cfg(not(any(target_arch = "wasm32", target_family = "windows")))'.dev-dependencies]
tmq = "0.3.2"

[[example]]
name = "kvs_bench"
required-features = [ "kvs_bench" ]
