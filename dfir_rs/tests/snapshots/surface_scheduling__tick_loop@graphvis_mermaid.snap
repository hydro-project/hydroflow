---
source: hydroflow/tests/surface_scheduling.rs
expression: "df.meta_graph().unwrap().to_mermaid(&Default::default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter([TickInstant::new(0)])</code>"/]:::pullClass
2v1[\"(2v1) <code>union()</code>"/]:::pullClass
3v1[/"(3v1) <code>tee()</code>"\]:::pushClass
4v1[/"(4v1) <code>map(|n| n + TickDuration::SINGLE_TICK)</code>"\]:::pushClass
5v1[\"(5v1) <code>filter(|&amp;n| n &lt; TickInstant::new(10))</code>"/]:::pullClass
6v1[\"(6v1) <code>defer_tick()</code>"/]:::pullClass
7v1[/"(7v1) <code>for_each(|v| out_send.send(v).unwrap())</code>"\]:::pushClass
8v1["(8v1) <code>handoff</code>"]:::otherClass
9v1["(9v1) <code>handoff</code>"]:::otherClass
10v1[\"(10v1) <code>identity()</code>"/]:::pullClass
11v1["(11v1) <code>handoff</code>"]:::otherClass
1v1-->2v1
2v1-->3v1
6v1-->2v1
5v1-->8v1
4v1-->9v1
3v1-->4v1
3v1-->7v1
8v1-->10v1
9v1-->5v1
10v1-->11v1
11v1--o6v1; linkStyle 10 stroke:red
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    5v1
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    1v1
    6v1
    2v1
    3v1
    4v1
    7v1
    subgraph sg_2v1_var_union_tee ["var <tt>union_tee</tt>"]
        2v1
        3v1
    end
end
subgraph sg_3v1 ["sg_3v1 stratum 1"]
    10v1
end

