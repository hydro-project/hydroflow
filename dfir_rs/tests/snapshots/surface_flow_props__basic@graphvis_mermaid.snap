---
source: hydroflow/tests/surface_flow_props.rs
expression: "hf.meta_graph().unwrap().to_mermaid(&Default::default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter_delta((0..10).map(SetUnionSingletonSet::new_from))</code>"/]:::pullClass
2v1[\"(2v1) <code>map(|SetUnion(SingletonSet(x))| SetUnion(SingletonSet(x + 5)))</code>"/]:::pullClass
3v1[/"(3v1) <code>tee()</code>"\]:::pushClass
4v1[/"(4v1) <code>cast(None)</code>"\]:::pushClass
5v1[/"(5v1) <code>map(|SetUnion(SingletonSet(x))| 10 * x)</code>"\]:::pushClass
6v1[/"(6v1) <code>for_each(|x| println!(&quot;seq {:?}&quot;, x))</code>"\]:::pushClass
7v1[/"(7v1) <code>for_each(|s| println!(&quot;delta {:?}&quot;, s))</code>"\]:::pushClass
8v1[/"(8v1) <code>map(|SetUnion(SingletonSet(x))| SetUnionHashSet::new_from([x]))</code>"\]:::pushClass
9v1[\"(9v1) <code>lattice_reduce()</code>"/]:::pullClass
10v1[/"(10v1) <code>for_each(|s| println!(&quot;cumul {:?}&quot;, s))</code>"\]:::pushClass
11v1["(11v1) <code>handoff</code>"]:::otherClass
2v1-.->3v1; linkStyle 0 stroke:#060
1v1-.->2v1; linkStyle 1 stroke:#060
5v1-->6v1
4v1-->5v1
3v1-.->4v1; linkStyle 4 stroke:#060
3v1-.->7v1; linkStyle 5 stroke:#060
9v1==>10v1; linkStyle 6 stroke:#060
8v1-.->11v1; linkStyle 7 stroke:#060
3v1-.->8v1; linkStyle 8 stroke:#060
11v1-.->9v1; linkStyle 9 stroke:#060
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    2v1
    3v1
    4v1
    5v1
    6v1
    7v1
    8v1
    subgraph sg_1v1_var_my_tee ["var <tt>my_tee</tt>"]
        1v1
        2v1
        3v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    9v1
    10v1
end

