---
source: hydroflow/tests/surface_scheduling.rs
expression: "df.meta_graph().unwrap().to_mermaid(&Default::default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter(0..10)</code>"/]:::pullClass
2v1[\"(2v1) <code>map(|i| (i, i))</code>"/]:::pullClass
3v1[\"(3v1) <code>fold_keyed::&lt;'static&gt;(Vec::new, Vec::push)</code>"/]:::pullClass
4v1[\"(4v1) <code>union()</code>"/]:::pullClass
5v1[/"(5v1) <code>tee()</code>"\]:::pushClass
6v1[\"(6v1) <code>filter(|_| false)</code>"/]:::pullClass
7v1[/"<div style=text-align:center>(7v1)</div> <code>for_each(|x| {<br>    println!(&quot;A {} {} {:?}&quot;, context.current_tick(), context.current_stratum(), x)<br>})</code>"\]:::pushClass
8v1["(8v1) <code>handoff</code>"]:::otherClass
9v1["(9v1) <code>handoff</code>"]:::otherClass
1v1-->2v1
3v1-->4v1
2v1-->8v1
4v1-->5v1
6v1-->4v1
5v1-->9v1
5v1-->7v1
8v1--x3v1; linkStyle 7 stroke:red
9v1-->6v1
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    2v1
    subgraph sg_1v1_var_in1 ["var <tt>in1</tt>"]
        1v1
        2v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 1"]
    9v1
    3v1
    6v1
    4v1
    5v1
    7v1
    subgraph sg_2v1_var_my_union_tee ["var <tt>my_union_tee</tt>"]
        4v1
        5v1
    end
end

