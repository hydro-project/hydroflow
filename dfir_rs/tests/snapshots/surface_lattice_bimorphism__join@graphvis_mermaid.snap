---
source: hydroflow/tests/surface_lattice_bimorphism.rs
expression: "df.meta_graph().unwrap().to_mermaid(& Default :: default())"
---
%%{init:{'theme':'base','themeVariables':{'clusterBkg':'#ddd','clusterBorder':'#888'}}}%%
flowchart TD
classDef pullClass fill:#8af,stroke:#000,text-align:left,white-space:pre
classDef pushClass fill:#ff8,stroke:#000,text-align:left,white-space:pre
classDef otherClass fill:#fdc,stroke:#000,text-align:left,white-space:pre
linkStyle default stroke:#aaa
1v1[\"(1v1) <code>source_iter([(7, 1), (7, 2)])</code>"/]:::pullClass
2v1[\"(2v1) <code>map(|(k, v)| MapUnionSingletonMap::new_from((k, SetUnionSingletonSet::new_from(v))))</code>"/]:::pullClass
3v1[\"(3v1) <code>state::&lt;'static, MapUnionHashMap&lt;usize, SetUnionHashSet&lt;usize&gt;&gt;&gt;()</code>"/]:::pullClass
4v1[\"(4v1) <code>source_iter([(7, 0), (7, 1), (7, 2)])</code>"/]:::pullClass
5v1[\"(5v1) <code>map(|(k, v)| MapUnionSingletonMap::new_from((k, SetUnionSingletonSet::new_from(v))))</code>"/]:::pullClass
6v1[\"(6v1) <code>state::&lt;'static, MapUnionHashMap&lt;usize, SetUnionHashSet&lt;usize&gt;&gt;&gt;()</code>"/]:::pullClass
7v1[\"<div style=text-align:center>(7v1)</div> <code>lattice_bimorphism(<br>    KeyedBimorphism::&lt;<br>        HashMap&lt;_, _&gt;,<br>        _,<br>    &gt;::new(CartesianProductBimorphism::&lt;HashSet&lt;_&gt;&gt;::default()),<br>    lhs,<br>    rhs,<br>)</code>"/]:::pullClass
8v1[/"(8v1) <code>for_each(|x| out_send.send(x).unwrap())</code>"\]:::pushClass
9v1["(9v1) <code>handoff</code>"]:::otherClass
10v1["(10v1) <code>handoff</code>"]:::otherClass
2v1-->3v1
1v1-->2v1
5v1-->6v1
4v1-->5v1
3v1-->9v1
6v1-->10v1
7v1-->8v1
9v1-->|0|7v1
10v1-->|1|7v1
3v1--x7v1; linkStyle 9 stroke:red
6v1--x7v1; linkStyle 10 stroke:red
subgraph sg_1v1 ["sg_1v1 stratum 0"]
    1v1
    2v1
    3v1
    subgraph sg_1v1_var_lhs ["var <tt>lhs</tt>"]
        1v1
        2v1
        3v1
    end
end
subgraph sg_2v1 ["sg_2v1 stratum 0"]
    4v1
    5v1
    6v1
    subgraph sg_2v1_var_rhs ["var <tt>rhs</tt>"]
        4v1
        5v1
        6v1
    end
end
subgraph sg_3v1 ["sg_3v1 stratum 1"]
    7v1
    8v1
    subgraph sg_3v1_var_my_join ["var <tt>my_join</tt>"]
        7v1
        8v1
    end
end
