---
source: hydroflow_plus_test/src/cluster/map_reduce.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("{}: {}" , string , count) }),
        input: ReduceKeyed {
            f: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , i32 , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | total , count | * total += count }),
            input: Persist(
                Map {
                    f: stageleft :: runtime_support :: fn1_type_hint :: < (hydroflow_plus :: location :: ClusterId < hydroflow_plus_test :: cluster :: map_reduce :: Worker > , (std :: string :: String , i32)) , (std :: string :: String , i32) > ({ use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b }),
                    input: Network {
                        from_location: Cluster(
                            1,
                        ),
                        from_key: None,
                        to_location: Process(
                            0,
                        ),
                        to_key: None,
                        serialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < (std :: string :: String , i32) > (& data) . unwrap () . into () }",
                                    ],
                                },
                            ),
                        ),
                        instantiate_fn: <network instantiate>,
                        deserialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| res | { let (id , b) = res . unwrap () ; (hydroflow_plus :: ClusterId :: < hydroflow_plus_test :: cluster :: map_reduce :: Worker > :: from_raw (id) , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (std :: string :: String , i32) > (& b) . unwrap ()) }",
                                    ],
                                },
                            ),
                        ),
                        input: Inspect {
                            f: stageleft :: runtime_support :: fn1_borrow_type_hint :: < (std :: string :: String , i32) , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | (string , count) | println ! ("partition count: {} - {}" , string , count) }),
                            input: FoldKeyed {
                                init: stageleft :: runtime_support :: fn0_type_hint :: < i32 > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | | 0 }),
                                acc: stageleft :: runtime_support :: fn2_borrow_mut_type_hint :: < i32 , () , () > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | count , _ | * count += 1 }),
                                input: Map {
                                    f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , (std :: string :: String , ()) > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | string | (string , ()) }),
                                    input: Network {
                                        from_location: Process(
                                            0,
                                        ),
                                        from_key: None,
                                        to_location: Cluster(
                                            1,
                                        ),
                                        to_key: None,
                                        serialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| (id , data) : (hydroflow_plus :: ClusterId < _ > , std :: string :: String) | { (id . raw_id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < std :: string :: String > (& data) . unwrap () . into ()) }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        instantiate_fn: <network instantiate>,
                                        deserialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        input: Map {
                                            f: stageleft :: runtime_support :: fn1_type_hint :: < (usize , std :: string :: String) , (hydroflow_plus :: location :: ClusterId < hydroflow_plus_test :: cluster :: map_reduce :: Worker > , std :: string :: String) > ({ use crate :: __staged :: cluster :: map_reduce :: * ; let all_ids_vec = unsafe { :: std :: mem :: transmute :: < _ , & :: std :: vec :: Vec < hydroflow_plus :: ClusterId < hydroflow_plus_test :: cluster :: map_reduce :: Worker > > > (__hydroflow_plus_cluster_ids_1) } ; | (i , w) | ((ClusterId :: from_raw ((i % all_ids_vec . len ()) as u32) , w)) }),
                                            input: Enumerate(
                                                Map {
                                                    f: stageleft :: runtime_support :: fn1_type_hint :: < & str , std :: string :: String > ({ use crate :: __staged :: cluster :: map_reduce :: * ; | s | s . to_string () }),
                                                    input: Source {
                                                        source: Iter(
                                                            { use crate :: __staged :: cluster :: map_reduce :: * ; vec ! ["abc" , "abc" , "xyz" , "abc"] },
                                                        ),
                                                        location_kind: Process(
                                                            0,
                                                        ),
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
]
