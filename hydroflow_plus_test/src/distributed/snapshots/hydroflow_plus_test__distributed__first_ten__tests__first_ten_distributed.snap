---
source: hydroflow_plus_test/src/distributed/first_ten.rs
expression: built.ir()
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < std :: string :: String , () > ({ use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("hi: {:?}" , n) }),
        input: Network {
            from_location: ExternalProcess(
                0,
            ),
            from_key: Some(
                0,
            ),
            to_location: Process(
                1,
            ),
            to_key: None,
            serialize_fn: None,
            instantiate_fn: <network instantiate>,
            deserialize_fn: Some(
                | res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () },
            ),
            input: Source {
                source: ExternalNetwork,
                location_kind: ExternalProcess(
                    0,
                ),
            },
        },
    },
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork , () > ({ use crate :: __staged :: distributed :: first_ten :: * ; | n | println ! ("{}" , n . n) }),
        input: Network {
            from_location: Process(
                1,
            ),
            from_key: None,
            to_location: Process(
                2,
            ),
            to_key: None,
            serialize_fn: Some(
                | data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork > (& data) . unwrap () . into () },
            ),
            instantiate_fn: <network instantiate>,
            deserialize_fn: Some(
                | res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork > (& res . unwrap ()) . unwrap () },
            ),
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < u32 , hydroflow_plus_test :: distributed :: first_ten :: SendOverNetwork > ({ use crate :: __staged :: distributed :: first_ten :: * ; | n | SendOverNetwork { n } }),
                input: Source {
                    source: Iter(
                        { use crate :: __staged :: distributed :: first_ten :: * ; 0 .. 10 },
                    ),
                    location_kind: Process(
                        1,
                    ),
                },
            },
        },
    },
]
