---
source: hydroflow_plus/src/rewrites/profiler.rs
expression: "&pushed_down.ir()"
---
[
    ForEach {
        f: stageleft :: runtime_support :: fn1_type_hint :: < i32 , () > ({ use crate :: __staged :: rewrites :: profiler :: tests :: * ; | n | println ! ("{}" , n) }),
        input: Inspect {
            f: { use crate :: __staged :: rewrites :: profiler :: * ; let counter_queue__free = Fake ; let counters__free = Fake ; let my_id__free = 0u32 ; { counter_queue__free . borrow () . unbounded_send ((my_id__free as usize , counters__free . borrow () [my_id__free as usize])) . unwrap () ; counters__free . borrow_mut () [my_id__free as usize] = 0 ; move | _ | { myself :: increment_counter (& mut counters__free . borrow_mut () [my_id__free as usize]) ; } } },
            input: Map {
                f: stageleft :: runtime_support :: fn1_type_hint :: < i32 , i32 > ({ use crate :: __staged :: rewrites :: profiler :: tests :: * ; | v | v + 1 }),
                input: Inspect {
                    f: { use crate :: __staged :: rewrites :: profiler :: * ; let counter_queue__free = Fake ; let counters__free = Fake ; let my_id__free = 1u32 ; { counter_queue__free . borrow () . unbounded_send ((my_id__free as usize , counters__free . borrow () [my_id__free as usize])) . unwrap () ; counters__free . borrow_mut () [my_id__free as usize] = 0 ; move | _ | { myself :: increment_counter (& mut counters__free . borrow_mut () [my_id__free as usize]) ; } } },
                    input: Source {
                        source: Iter(
                            { use crate :: __staged :: rewrites :: profiler :: tests :: * ; 0 .. 10 },
                        ),
                        location_kind: Process(
                            0,
                        ),
                    },
                },
            },
        },
    },
]
