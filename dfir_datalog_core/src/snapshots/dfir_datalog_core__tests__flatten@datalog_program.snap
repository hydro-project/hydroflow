---
source: dfir_datalog_core/src/lib.rs
expression: "prettyplease :: unparse(& wrapped)"
---
fn main() {
    {
        #[allow(unused_qualifications)]
        {
            use hydroflow::{var_expr, var_args};
            let mut df = hydroflow::scheduled::graph::Dfir::new();
            df.__assign_meta_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"source_stream (ints1)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"flat_map (| row : (_ , _ ,) | row . 1 . into_iter () . map (move | __flattened_element | (:: std :: clone :: Clone :: clone (& row . 0) , __flattened_element ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ , _ ,) , _) | (g . 0 , g . 1 ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1}],\"node_loops\":[{\"value\":null,\"version\":0}],\"loop_nodes\":[{\"value\":null,\"version\":0}],\"loop_parent\":[{\"value\":null,\"version\":0}],\"loop_children\":[{\"value\":null,\"version\":0}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":10,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1}],\"node_singleton_references\":[{\"value\":null,\"version\":0},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints1_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"source_reader_0\",\"version\":1}],\"subgraph_laziness\":[{\"value\":null,\"version\":0}]}",
            );
            df.__assign_diagnostics("[]");
            let mut sg_1v1_node_7v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: hydroflow::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl hydroflow::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(ints1)
            };
            let sg_1v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::<
                            _,
                            hydroflow::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_1v1_node_5v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        hydroflow::util::monotonic_map::MonotonicMap::<
                            _,
                            hydroflow::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(),
                var_expr!(),
                false,
                move |context, var_args!(), var_args!()| {
                    let op_7v1 = std::iter::from_fn(|| {
                        match hydroflow::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_1v1_node_7v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_7v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_7v1__source_stream__loc_nopath_2_26_2_46<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_7v1__source_stream__loc_nopath_2_26_2_46(op_7v1)
                    };
                    let op_2v1 = op_7v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_1v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_2v1__unique__loc_nopath_2_19_2_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_2v1__unique__loc_nopath_2_19_2_24(op_2v1)
                    };
                    let op_9v1 = op_2v1
                        .flat_map(|row: (_, _)| {
                            row
                                .1
                                .into_iter()
                                .map(move |__flattened_element| (
                                    ::std::clone::Clone::clone(&row.0),
                                    __flattened_element,
                                ))
                        });
                    let op_9v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_9v1__flat_map__loc_nopath_6_12_6_40<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_9v1__flat_map__loc_nopath_6_12_6_40(op_9v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "dfir has no explicit `cloned`/`copied` operator"
                    )]
                    let op_10v1 = op_9v1.map(|row: (_, _)| ((row.0, row.1), ()));
                    let op_10v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_10v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_10v1__map__loc_nopath_1_0_1_0(op_10v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "dfir has no explicit `cloned`/`copied` operator"
                    )]
                    let op_11v1 = op_10v1.map(|(g, a): ((_, _), _)| (g.0, g.1));
                    let op_11v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_11v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_11v1__map__loc_nopath_1_0_1_0(op_11v1)
                    };
                    let op_5v1 = op_11v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_1v1_node_5v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_5v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_5v1__unique__loc_nopath_4_20_4_26<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_5v1__unique__loc_nopath_4_20_4_26(op_5v1)
                    };
                    let op_8v1 = hydroflow::pusherator::for_each::ForEach::new(|v| {
                        result.send(v).unwrap()
                    });
                    let op_8v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_8v1__for_each__loc_nopath_4_28_4_65<
                            Item,
                            Input: hydroflow::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl hydroflow::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: hydroflow::pusherator::Pusherator<Item = Item>,
                            > hydroflow::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_8v1__for_each__loc_nopath_4_28_4_65(op_8v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_1v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: hydroflow::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        hydroflow::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_1v1(op_5v1, op_8v1);
                },
            );
            df
        }
    }
}
