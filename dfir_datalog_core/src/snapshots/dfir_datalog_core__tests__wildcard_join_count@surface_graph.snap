---
source: dfir_datalog_core/src/lib.rs
expression: flat_graph_ref.surface_syntax_string()
---
2v1 = unique :: < 'tick > ();
3v1 = tee ();
5v1 = unique :: < 'tick > ();
6v1 = tee ();
8v1 = unique :: < 'tick > ();
11v1 = unique :: < 'tick > ();
13v1 = source_stream (ints1);
14v1 = source_stream (ints2);
15v1 = for_each (| v | result . send (v) . unwrap ());
16v1 = for_each (| v | result2 . send (v) . unwrap ());
17v1 = join :: < 'tick , 'tick , dfir_rs :: compiled :: pull :: HalfMultisetJoinState > ();
18v1 = map (| kv : ((_ ,) , ((_ ,) , ())) | (kv . 0 . 0 , kv . 1 . 0 . 0 ,));
19v1 = map (| _v : (_ , _ ,) | ((_v . 0 ,) , (_v . 1 ,)));
20v1 = map (| _v : (_ ,) | ((_v . 0 ,) , ()));
21v1 = map (| row : (_ , _ ,) | (() , (() ,)));
22v1 = fold_keyed :: < 'tick , () , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some (prev + 1) } else { Some (1) } ; });
23v1 = map (| (g , a) : (() , _) | (a . 0 . unwrap () ,));
24v1 = join :: < 'tick , 'tick , dfir_rs :: compiled :: pull :: HalfMultisetJoinState > ();
25v1 = map (| kv : ((_ ,) , ((_ ,) , ())) | (kv . 0 . 0 , kv . 1 . 0 . 0 ,));
26v1 = map (| _v : (_ , _ ,) | ((_v . 0 ,) , (_v . 1 ,)));
27v1 = map (| _v : (_ ,) | ((_v . 0 ,) , ()));
28v1 = map (| row : (_ , _ ,) | (() , ((row . 0) ,)));
29v1 = fold_keyed :: < 'tick , () , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let prev : (dfir_rs :: rustc_hash :: FxHashSet < _ > , _) = prev ; let mut set : dfir_rs :: rustc_hash :: FxHashSet < _ > = prev . 0 ; if set . insert (val . 0) { (set , prev . 1 + 1) } else { (set , prev . 1) } }) } else { Some ({ let mut set = dfir_rs :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; (set , 1) }) } ; });
30v1 = map (| (g , a) : (() , _) | (a . 0 . unwrap () . 1 ,));

13v1 -> 2v1;
2v1 -> 3v1;
14v1 -> 5v1;
5v1 -> 6v1;
23v1 -> 8v1;
30v1 -> 11v1;
8v1 -> 15v1;
11v1 -> 16v1;
17v1 -> 18v1;
19v1 -> 17v1;
3v1 -> 19v1;
20v1 -> 17v1;
6v1 -> 20v1;
22v1 -> 23v1;
21v1 -> 22v1;
18v1 -> 21v1;
24v1 -> 25v1;
26v1 -> 24v1;
3v1 -> 26v1;
27v1 -> 24v1;
6v1 -> 27v1;
29v1 -> 30v1;
28v1 -> 29v1;
25v1 -> 28v1;
