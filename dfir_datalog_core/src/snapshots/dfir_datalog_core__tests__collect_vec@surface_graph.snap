---
source: dfir_datalog_core/src/lib.rs
expression: flat_graph_ref.surface_syntax_string()
---
2v1 = unique :: < 'tick > ();
5v1 = unique :: < 'tick > ();
8v1 = unique :: < 'tick > ();
10v1 = source_stream (ints1);
11v1 = source_stream (ints2);
12v1 = for_each (| v | result . send (v) . unwrap ());
13v1 = join :: < 'tick , 'tick , dfir_rs :: compiled :: pull :: HalfMultisetJoinState > ();
14v1 = map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,));
15v1 = map (| _v : (_ ,) | (() , (_v . 0 ,)));
16v1 = map (| _v : (_ ,) | (() , (_v . 0 ,)));
17v1 = map (| row : (_ , _ ,) | (() , ((row . 0 , row . 1) ,)));
18v1 = fold_keyed :: < 'tick , () , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let mut set : dfir_rs :: rustc_hash :: FxHashSet < _ > = prev ; set . insert (val . 0) ; set }) } else { Some ({ let mut set = dfir_rs :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; set }) } ; });
19v1 = map (| (g , a) : (() , _) | (a . 0 . unwrap () . into_iter () . collect :: < Vec < _ > > () ,));

10v1 -> 2v1;
11v1 -> 5v1;
19v1 -> 8v1;
8v1 -> 12v1;
13v1 -> 14v1;
15v1 -> 13v1;
2v1 -> 15v1;
16v1 -> 13v1;
5v1 -> 16v1;
18v1 -> 19v1;
17v1 -> 18v1;
14v1 -> 17v1;
