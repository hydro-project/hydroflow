---
source: dfir_datalog_core/src/lib.rs
expression: "prettyplease :: unparse(& wrapped)"
---
fn main() {
    {
        #[allow(unused_qualifications)]
        {
            use dfir_rs::{var_expr, var_args};
            let mut df = dfir_rs::scheduled::graph::dfir_rs::new();
            df.__assign_meta_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"defer_tick ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"defer_tick ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"defer_tick ()\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints1)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints2)\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints3)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result3 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result4 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'static , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"join :: < 'static , 'tick , hydroflow :: compiled :: pull :: HalfMultisetJoinState > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : (() , ((_ , _ ,) , (_ ,))) | (kv . 1 . 0 . 0 , kv . 1 . 0 . 1 , kv . 1 . 1 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ , _ ,) | (() , (_v . 0 , _v . 1 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (() , (_v . 0 ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ , _ ,) | ((row . 0 , row . 1 , row . 2 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ , _ , _ ,) , _) | (g . 0 , g . 1 , g . 2 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"anti_join ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| kv : ((_ ,) , ()) | (kv . 0 . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | ((_v . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| _v : (_ ,) | (_v . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | ((row . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ ,) , _) | (g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | ((row . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ ,) , _) | (g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | ((row . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ ,) , _) | (g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | ((row . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ ,) , _) | (g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ ,) | ((row . 0 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ ,) , _) | (g . 0 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":34,\"version\":1},{\"idx\":14,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":28,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":25,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":35,\"version\":1},{\"idx\":11,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1},{\"idx\":22,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":19,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":36,\"version\":1},{\"idx\":6,\"version\":3}],\"version\":5},{\"value\":[{\"idx\":13,\"version\":3},{\"idx\":33,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":50,\"version\":1},{\"idx\":15,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":16,\"version\":3},{\"idx\":31,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":58,\"version\":1},{\"idx\":18,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":19,\"version\":3},{\"idx\":10,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":63,\"version\":1},{\"idx\":21,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":22,\"version\":3},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":68,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":25,\"version\":3},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":61,\"version\":1},{\"idx\":27,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":28,\"version\":3},{\"idx\":3,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":65,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":31,\"version\":1},{\"idx\":32,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":30,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":33,\"version\":1},{\"idx\":16,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":32,\"version\":1},{\"idx\":13,\"version\":3}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":6,\"version\":3},{\"idx\":12,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":11,\"version\":3},{\"idx\":7,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":15,\"version\":1},{\"idx\":37,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":38,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":21,\"version\":1},{\"idx\":39,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":40,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":43,\"version\":1},{\"idx\":41,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":29,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":44,\"version\":1},{\"idx\":41,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":26,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":45,\"version\":1},{\"idx\":46,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":47,\"version\":1},{\"idx\":45,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":42,\"version\":1},{\"idx\":47,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":48,\"version\":1},{\"idx\":45,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1},{\"idx\":48,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":14,\"version\":3},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":49,\"version\":1},{\"idx\":50,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":46,\"version\":1},{\"idx\":49,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":51,\"version\":1},{\"idx\":52,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":54,\"version\":1},{\"idx\":51,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":53,\"version\":1},{\"idx\":54,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":23,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":56,\"version\":1},{\"idx\":20,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":55,\"version\":1},{\"idx\":56,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":9,\"version\":1},{\"idx\":55,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":3},{\"idx\":65,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":57,\"version\":1},{\"idx\":58,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":52,\"version\":1},{\"idx\":57,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":26,\"version\":3},{\"idx\":44,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":60,\"version\":1},{\"idx\":61,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":59,\"version\":1},{\"idx\":60,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":59,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":20,\"version\":3},{\"idx\":51,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":62,\"version\":1},{\"idx\":63,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":27,\"version\":1},{\"idx\":62,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":29,\"version\":3},{\"idx\":43,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":64,\"version\":1},{\"idx\":17,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":4,\"version\":1},{\"idx\":64,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":23,\"version\":3},{\"idx\":53,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":67,\"version\":1},{\"idx\":68,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":66,\"version\":1},{\"idx\":67,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":32,\"version\":1},{\"idx\":66,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":5},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"0\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Int\":\"1\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"2\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"3\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":1}],\"node_loops\":[{\"value\":null,\"version\":0}],\"loop_nodes\":[{\"value\":null,\"version\":0}],\"loop_parent\":[{\"value\":null,\"version\":0}],\"loop_children\":[{\"value\":null,\"version\":0}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":9,\"version\":1},\"version\":1},{\"value\":{\"idx\":10,\"version\":1},\"version\":1},{\"value\":{\"idx\":11,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":8,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":5,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":33,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":12,\"version\":1},{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1},{\"idx\":41,\"version\":1},{\"idx\":42,\"version\":1},{\"idx\":47,\"version\":1},{\"idx\":48,\"version\":1},{\"idx\":45,\"version\":1},{\"idx\":46,\"version\":1},{\"idx\":49,\"version\":1},{\"idx\":50,\"version\":1},{\"idx\":15,\"version\":1},{\"idx\":37,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":53,\"version\":1},{\"idx\":54,\"version\":1},{\"idx\":51,\"version\":1},{\"idx\":52,\"version\":1},{\"idx\":57,\"version\":1},{\"idx\":58,\"version\":1},{\"idx\":18,\"version\":1},{\"idx\":38,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":4,\"version\":1},{\"idx\":59,\"version\":1},{\"idx\":60,\"version\":1},{\"idx\":61,\"version\":1},{\"idx\":27,\"version\":1},{\"idx\":62,\"version\":1},{\"idx\":63,\"version\":1},{\"idx\":21,\"version\":1},{\"idx\":39,\"version\":1},{\"idx\":64,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":65,\"version\":1},{\"idx\":30,\"version\":1},{\"idx\":31,\"version\":1},{\"idx\":32,\"version\":1},{\"idx\":66,\"version\":1},{\"idx\":67,\"version\":1},{\"idx\":68,\"version\":1},{\"idx\":24,\"version\":1},{\"idx\":40,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":7,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":9,\"version\":1},{\"idx\":55,\"version\":1},{\"idx\":56,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":34,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":35,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":36,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":2,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1}],\"node_singleton_references\":[{\"value\":null,\"version\":0},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints1_insert\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":\"ints1\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints2_insert\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":\"ints2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints3_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result3_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result4_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"intermediate_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"intermediate_persist_insert\",\"version\":1},{\"value\":\"intermediate_persist\",\"version\":1},{\"value\":\"intermediate_persist\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_2\",\"version\":1},{\"value\":\"join_2\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_4\",\"version\":1},{\"value\":\"join_4\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"join_7\",\"version\":1},{\"value\":\"join_7\",\"version\":1}],\"subgraph_laziness\":[{\"value\":null,\"version\":0}]}",
            );
            df.__assign_diagnostics("[]");
            let (hoff_6v3_send, hoff_6v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(6v3)");
            let (hoff_11v3_send, hoff_11v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(11v3)");
            let (hoff_13v3_send, hoff_13v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(13v3)");
            let (hoff_14v3_send, hoff_14v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(14v3)");
            let (hoff_16v3_send, hoff_16v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(16v3)");
            let (hoff_17v3_send, hoff_17v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(17v3)");
            let (hoff_19v3_send, hoff_19v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(19v3)");
            let (hoff_20v3_send, hoff_20v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(20v3)");
            let (hoff_22v3_send, hoff_22v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(22v3)");
            let (hoff_23v3_send, hoff_23v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(23v3)");
            let (hoff_25v3_send, hoff_25v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(25v3)");
            let (hoff_26v3_send, hoff_26v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(26v3)");
            let (hoff_28v3_send, hoff_28v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(28v3)");
            let (hoff_29v3_send, hoff_29v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(29v3)");
            let mut sg_9v1_node_34v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: dfir_rs::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl dfir_rs::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(ints1)
            };
            let mut sg_10v1_node_35v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: dfir_rs::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl dfir_rs::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(ints2)
            };
            let mut sg_11v1_node_36v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: dfir_rs::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl dfir_rs::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(ints3)
            };
            let sg_4v1_node_12v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_4v1_node_41v1_joindata_lhs = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                );
            let sg_4v1_node_41v1_joindata_rhs = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                );
            let sg_4v1_node_45v1_joindata_lhs = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                );
            let sg_4v1_node_45v1_joindata_rhs = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::compiled::pull::HalfMultisetJoinState::default(),
                    ),
                );
            df.set_state_tick_hook(
                sg_4v1_node_45v1_joindata_rhs,
                |rcell| dfir_rs::util::clear::Clear::clear(rcell.get_mut()),
            );
            let sg_4v1_node_15v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_53v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            let sg_5v1_node_51v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_5v1_node_51v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_5v1_node_18v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_6v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_6v1_node_3v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(dfir_rs::rustc_hash::FxHashSet::default()),
                );
            let sg_6v1_node_3v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_6v1_node_21v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_6v1_node_27v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_61v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            let sg_7v1_node_30v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_7v1_node_31v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(dfir_rs::rustc_hash::FxHashSet::default()),
                );
            let sg_7v1_node_31v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_7v1_node_24v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_68v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            let sg_8v1_node_7v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_8v1_node_8v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(dfir_rs::rustc_hash::FxHashSet::default()),
                );
            let sg_8v1_node_8v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_55v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(9v1)",
                0,
                var_expr!(),
                var_expr!(hoff_14v3_send),
                false,
                move |context, var_args!(), var_args!(hoff_14v3_send)| {
                    let hoff_14v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_14v3_send.give(Some(v));
                    });
                    let op_34v1 = std::iter::from_fn(|| {
                        match dfir_rs::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_9v1_node_34v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_34v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_34v1__source_stream__loc_nopath_2_26_2_46<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_34v1__source_stream__loc_nopath_2_26_2_46(op_34v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_9v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_9v1(op_34v1, hoff_14v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(10v1)",
                0,
                var_expr!(),
                var_expr!(hoff_11v3_send),
                false,
                move |context, var_args!(), var_args!(hoff_11v3_send)| {
                    let hoff_11v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_11v3_send.give(Some(v));
                    });
                    let op_35v1 = std::iter::from_fn(|| {
                        match dfir_rs::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_10v1_node_35v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_35v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_35v1__source_stream__loc_nopath_5_26_5_46<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_35v1__source_stream__loc_nopath_5_26_5_46(op_35v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_10v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_10v1(op_35v1, hoff_11v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(11v1)",
                0,
                var_expr!(),
                var_expr!(hoff_6v3_send),
                false,
                move |context, var_args!(), var_args!(hoff_6v3_send)| {
                    let hoff_6v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_6v3_send.give(Some(v));
                    });
                    let op_36v1 = std::iter::from_fn(|| {
                        match dfir_rs::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_11v1_node_36v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_36v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_36v1__source_stream__loc_nopath_8_26_8_46<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_36v1__source_stream__loc_nopath_8_26_8_46(op_36v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_11v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_11v1(op_36v1, hoff_6v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(hoff_25v3_recv),
                var_expr!(hoff_28v3_send),
                false,
                move |context, var_args!(hoff_25v3_recv), var_args!(hoff_28v3_send)| {
                    let mut hoff_25v3_recv = hoff_25v3_recv.borrow_mut_swap();
                    let hoff_25v3_recv = hoff_25v3_recv.drain(..);
                    let hoff_28v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_28v3_send.give(Some(v));
                    });
                    let op_5v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_25v3_recv)
                    };
                    let op_5v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_5v1__defer_tick__loc_nopath_2_19_2_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_5v1__defer_tick__loc_nopath_2_19_2_24(op_5v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_1v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_1v1(op_5v1, hoff_28v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                var_expr!(hoff_19v3_recv),
                var_expr!(hoff_22v3_send),
                false,
                move |context, var_args!(hoff_19v3_recv), var_args!(hoff_22v3_send)| {
                    let mut hoff_19v3_recv = hoff_19v3_recv.borrow_mut_swap();
                    let hoff_19v3_recv = hoff_19v3_recv.drain(..);
                    let hoff_22v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_22v3_send.give(Some(v));
                    });
                    let op_10v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_19v3_recv)
                    };
                    let op_10v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_10v1__defer_tick__loc_nopath_5_19_5_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_10v1__defer_tick__loc_nopath_5_19_5_24(op_10v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_2v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_2v1(op_10v1, hoff_22v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(3v1)",
                0,
                var_expr!(hoff_13v3_recv),
                var_expr!(hoff_16v3_send),
                false,
                move |context, var_args!(hoff_13v3_recv), var_args!(hoff_16v3_send)| {
                    let mut hoff_13v3_recv = hoff_13v3_recv.borrow_mut_swap();
                    let hoff_13v3_recv = hoff_13v3_recv.drain(..);
                    let hoff_16v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_16v3_send.give(Some(v));
                    });
                    let op_33v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_13v3_recv)
                    };
                    let op_33v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_33v1__defer_tick__loc_nopath_21_21_21_41<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_33v1__defer_tick__loc_nopath_21_21_21_41(op_33v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_3v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_3v1(op_33v1, hoff_16v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(4v1)",
                1,
                var_expr!(hoff_6v3_recv, hoff_26v3_recv, hoff_29v3_recv),
                var_expr!(),
                false,
                move |
                    context,
                    var_args!(hoff_6v3_recv, hoff_26v3_recv, hoff_29v3_recv),
                    var_args!()|
                {
                    let mut hoff_6v3_recv = hoff_6v3_recv.borrow_mut_swap();
                    let hoff_6v3_recv = hoff_6v3_recv.drain(..);
                    let mut hoff_26v3_recv = hoff_26v3_recv.borrow_mut_swap();
                    let hoff_26v3_recv = hoff_26v3_recv.drain(..);
                    let mut hoff_29v3_recv = hoff_29v3_recv.borrow_mut_swap();
                    let hoff_29v3_recv = hoff_29v3_recv.drain(..);
                    let op_12v1 = hoff_6v3_recv
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_4v1_node_12v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_12v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_12v1__unique__loc_nopath_8_19_8_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_12v1__unique__loc_nopath_8_19_8_24(op_12v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_43v1 = hoff_29v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                    let op_43v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_43v1__map__loc_nopath_15_31_15_39<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_43v1__map__loc_nopath_15_31_15_39(op_43v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_44v1 = hoff_26v3_recv.map(|_v: (_,)| ((), (_v.0,)));
                    let op_44v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_44v1__map__loc_nopath_15_41_15_49<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_44v1__map__loc_nopath_15_41_15_49(op_44v1)
                    };
                    let mut sg_4v1_node_41v1_joindata_lhs_borrow = context
                        .state_ref(sg_4v1_node_41v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_4v1_node_41v1_joindata_rhs_borrow = context
                        .state_ref(sg_4v1_node_41v1_joindata_rhs)
                        .borrow_mut();
                    let op_41v1 = {
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut dfir_rs::compiled::pull::HalfMultisetJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut dfir_rs::compiled::pull::HalfMultisetJoinState<
                                K,
                                V2,
                                V1,
                            >,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Clone,
                            V2: Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            dfir_rs::compiled::pull::symmetric_hash_join_into_iter(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            op_43v1,
                            op_44v1,
                            &mut *sg_4v1_node_41v1_joindata_lhs_borrow,
                            &mut *sg_4v1_node_41v1_joindata_rhs_borrow,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_41v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_41v1__join__loc_nopath_15_12_15_59<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_41v1__join__loc_nopath_15_12_15_59(op_41v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_42v1 = op_41v1
                        .map(|kv: ((), ((_,), (_,)))| (kv.1.0.0, kv.1.1.0));
                    let op_42v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_42v1__map__loc_nopath_15_12_15_59<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_42v1__map__loc_nopath_15_12_15_59(op_42v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_47v1 = op_42v1.map(|_v: (_, _)| ((), (_v.0, _v.1)));
                    let op_47v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_47v1__map__loc_nopath_15_31_15_49<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_47v1__map__loc_nopath_15_31_15_49(op_47v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_48v1 = op_12v1.map(|_v: (_,)| ((), (_v.0,)));
                    let op_48v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_48v1__map__loc_nopath_15_51_15_59<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_48v1__map__loc_nopath_15_51_15_59(op_48v1)
                    };
                    let mut sg_4v1_node_45v1_joindata_lhs_borrow = context
                        .state_ref(sg_4v1_node_45v1_joindata_lhs)
                        .borrow_mut();
                    let mut sg_4v1_node_45v1_joindata_rhs_borrow = context
                        .state_ref(sg_4v1_node_45v1_joindata_rhs)
                        .borrow_mut();
                    let op_45v1 = {
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V1, I2, V2>(
                            lhs: I1,
                            rhs: I2,
                            lhs_state: &'a mut dfir_rs::compiled::pull::HalfMultisetJoinState<
                                K,
                                V1,
                                V2,
                            >,
                            rhs_state: &'a mut dfir_rs::compiled::pull::HalfMultisetJoinState<
                                K,
                                V2,
                                V1,
                            >,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, (V1, V2))>
                        where
                            K: Eq + std::hash::Hash + Clone,
                            V1: Clone,
                            V2: Clone,
                            I1: 'a + Iterator<Item = (K, V1)>,
                            I2: 'a + Iterator<Item = (K, V2)>,
                        {
                            dfir_rs::compiled::pull::symmetric_hash_join_into_iter(
                                lhs,
                                rhs,
                                lhs_state,
                                rhs_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            op_47v1,
                            op_48v1,
                            &mut *sg_4v1_node_45v1_joindata_lhs_borrow,
                            &mut *sg_4v1_node_45v1_joindata_rhs_borrow,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_45v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_45v1__join__loc_nopath_15_12_15_59<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_45v1__join__loc_nopath_15_12_15_59(op_45v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_46v1 = op_45v1
                        .map(|kv: ((), ((_, _), (_,)))| (kv.1.0.0, kv.1.0.1, kv.1.1.0));
                    let op_46v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_46v1__map__loc_nopath_15_12_15_59<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_46v1__map__loc_nopath_15_12_15_59(op_46v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_49v1 = op_46v1
                        .map(|row: (_, _, _)| ((row.0, row.1, row.2), ()));
                    let op_49v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_49v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_49v1__map__loc_nopath_1_0_1_0(op_49v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_50v1 = op_49v1.map(|(g, a): ((_, _, _), _)| (g.0, g.1, g.2));
                    let op_50v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_50v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_50v1__map__loc_nopath_1_0_1_0(op_50v1)
                    };
                    let op_15v1 = op_50v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_4v1_node_15v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_15v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_15v1__unique__loc_nopath_10_20_10_26<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_15v1__unique__loc_nopath_10_20_10_26(op_15v1)
                    };
                    let op_37v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result.send(v).unwrap()
                    });
                    let op_37v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_37v1__for_each__loc_nopath_10_28_10_65<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_37v1__for_each__loc_nopath_10_28_10_65(op_37v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_4v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_4v1(op_15v1, op_37v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(5v1)",
                2,
                var_expr!(hoff_20v3_recv, hoff_23v3_recv),
                var_expr!(),
                false,
                move |context, var_args!(hoff_20v3_recv, hoff_23v3_recv), var_args!()| {
                    let mut hoff_20v3_recv = hoff_20v3_recv.borrow_mut_swap();
                    let hoff_20v3_recv = hoff_20v3_recv.drain(..);
                    let mut hoff_23v3_recv = hoff_23v3_recv.borrow_mut_swap();
                    let hoff_23v3_recv = hoff_23v3_recv.drain(..);
                    let mut sg_5v1_node_53v1_persistvec = context
                        .state_ref(singleton_op_53v1)
                        .borrow_mut();
                    let op_53v1 = {
                        if context.is_first_run_this_tick() {
                            sg_5v1_node_53v1_persistvec.extend(hoff_23v3_recv);
                            sg_5v1_node_53v1_persistvec.iter().cloned()
                        } else {
                            let len = sg_5v1_node_53v1_persistvec.len();
                            sg_5v1_node_53v1_persistvec.extend(hoff_23v3_recv);
                            sg_5v1_node_53v1_persistvec[len..].iter().cloned()
                        }
                    };
                    let op_53v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_53v1__persist__loc_nopath_16_26_16_34<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_53v1__persist__loc_nopath_16_26_16_34(op_53v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_54v1 = op_53v1.map(|_v: (_,)| ((_v.0,), ()));
                    let op_54v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_54v1__map__loc_nopath_16_26_16_34<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_54v1__map__loc_nopath_16_26_16_34(op_54v1)
                    };
                    let mut sg_5v1_node_51v1_antijoindata_neg_borrow = context
                        .state_ref(sg_5v1_node_51v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_5v1_node_51v1_antijoindata_pos_borrow = context
                        .state_ref(sg_5v1_node_51v1_antijoindata_pos)
                        .borrow_mut();
                    let op_51v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_20v3_recv,
                            op_54v1,
                            &mut *sg_5v1_node_51v1_antijoindata_neg_borrow
                                .get_mut_clear(context.current_tick()),
                            &mut *sg_5v1_node_51v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_51v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_51v1__anti_join__loc_nopath_16_12_16_45<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_51v1__anti_join__loc_nopath_16_12_16_45(op_51v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_52v1 = op_51v1.map(|kv: ((_,), ())| (kv.0.0,));
                    let op_52v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_52v1__map__loc_nopath_16_12_16_45<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_52v1__map__loc_nopath_16_12_16_45(op_52v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_57v1 = op_52v1.map(|row: (_,)| ((row.0,), ()));
                    let op_57v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_57v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_57v1__map__loc_nopath_1_0_1_0(op_57v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_58v1 = op_57v1.map(|(g, a): ((_,), _)| (g.0,));
                    let op_58v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_58v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_58v1__map__loc_nopath_1_0_1_0(op_58v1)
                    };
                    let op_18v1 = op_58v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_5v1_node_18v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_18v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_18v1__unique__loc_nopath_11_20_11_27<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_18v1__unique__loc_nopath_11_20_11_27(op_18v1)
                    };
                    let op_38v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result2.send(v).unwrap()
                    });
                    let op_38v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_38v1__for_each__loc_nopath_11_29_11_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_38v1__for_each__loc_nopath_11_29_11_67(op_38v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_5v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_5v1(op_18v1, op_38v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(6v1)",
                1,
                var_expr!(hoff_14v3_recv, hoff_28v3_recv),
                var_expr!(
                    hoff_17v3_send, hoff_23v3_send, hoff_25v3_send, hoff_29v3_send
                ),
                false,
                move |
                    context,
                    var_args!(hoff_14v3_recv, hoff_28v3_recv),
                    var_args!(
                        hoff_17v3_send, hoff_23v3_send, hoff_25v3_send, hoff_29v3_send
                    )|
                {
                    let mut hoff_14v3_recv = hoff_14v3_recv.borrow_mut_swap();
                    let hoff_14v3_recv = hoff_14v3_recv.drain(..);
                    let mut hoff_28v3_recv = hoff_28v3_recv.borrow_mut_swap();
                    let hoff_28v3_recv = hoff_28v3_recv.drain(..);
                    let hoff_17v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_17v3_send.give(Some(v));
                    });
                    let hoff_23v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_23v3_send.give(Some(v));
                    });
                    let hoff_25v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_25v3_send.give(Some(v));
                    });
                    let hoff_29v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_29v3_send.give(Some(v));
                    });
                    let op_2v1 = hoff_14v3_recv
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_6v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_2v1__unique__loc_nopath_2_19_2_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_2v1__unique__loc_nopath_2_19_2_24(op_2v1)
                    };
                    let op_2v1 = op_2v1.map(|k| (k, ()));
                    let mut sg_6v1_node_3v1_antijoindata_neg_borrow = context
                        .state_ref(sg_6v1_node_3v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_6v1_node_3v1_antijoindata_pos_borrow = context
                        .state_ref(sg_6v1_node_3v1_antijoindata_pos)
                        .borrow_mut();
                    let op_3v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_28v3_recv,
                            op_2v1,
                            &mut *sg_6v1_node_3v1_antijoindata_neg_borrow,
                            &mut *sg_6v1_node_3v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_3v1 = op_3v1.map(|(k, ())| k);
                    let op_3v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_3v1__difference__loc_nopath_2_19_2_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_3v1__difference__loc_nopath_2_19_2_24(op_3v1)
                    };
                    let op_64v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_,)| ((row.0,), ()),
                        hoff_17v3_send,
                    );
                    let op_64v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_64v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_64v1__map__loc_nopath_1_0_1_0(op_64v1)
                    };
                    let op_39v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result3.send(v).unwrap()
                    });
                    let op_39v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_39v1__for_each__loc_nopath_12_29_12_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_39v1__for_each__loc_nopath_12_29_12_67(op_39v1)
                    };
                    let op_21v1 = dfir_rs::pusherator::filter::Filter::new(
                        |item| {
                            let mut borrow = context
                                .state_ref(sg_6v1_node_21v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        },
                        op_39v1,
                    );
                    let op_21v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_21v1__unique__loc_nopath_12_20_12_27<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_21v1__unique__loc_nopath_12_20_12_27(op_21v1)
                    };
                    let op_63v1 = dfir_rs::pusherator::map::Map::new(
                        |(g, a): ((_,), _)| (g.0,),
                        op_21v1,
                    );
                    let op_63v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_63v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_63v1__map__loc_nopath_1_0_1_0(op_63v1)
                    };
                    let op_62v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_,)| ((row.0,), ()),
                        op_63v1,
                    );
                    let op_62v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_62v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_62v1__map__loc_nopath_1_0_1_0(op_62v1)
                    };
                    let op_27v1 = dfir_rs::pusherator::filter::Filter::new(
                        |item| {
                            let mut borrow = context
                                .state_ref(sg_6v1_node_27v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        },
                        op_62v1,
                    );
                    let op_27v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_27v1__unique__loc_nopath_18_12_18_24<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_27v1__unique__loc_nopath_18_12_18_24(op_27v1)
                    };
                    let mut sg_6v1_node_61v1_persistvec = context
                        .state_ref(singleton_op_61v1)
                        .borrow_mut();
                    let op_61v1 = {
                        fn constrain_types<'ctx, Push, Item>(
                            vec: &'ctx mut Vec<Item>,
                            mut output: Push,
                            is_new_tick: bool,
                        ) -> impl 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>
                        where
                            Push: 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>,
                            Item: ::std::clone::Clone,
                        {
                            if is_new_tick {
                                vec.iter()
                                    .cloned()
                                    .for_each(|item| {
                                        dfir_rs::pusherator::Pusherator::give(&mut output, item);
                                    });
                            }
                            dfir_rs::pusherator::map::Map::new(
                                |item| {
                                    vec.push(item);
                                    vec.last().unwrap().clone()
                                },
                                output,
                            )
                        }
                        constrain_types(
                            &mut *sg_6v1_node_61v1_persistvec,
                            op_27v1,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_61v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_61v1__persist__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_61v1__persist__loc_nopath_1_0_1_0(op_61v1)
                    };
                    let op_60v1 = dfir_rs::pusherator::map::Map::new(
                        |(g, a): ((_,), _)| (g.0,),
                        op_61v1,
                    );
                    let op_60v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_60v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_60v1__map__loc_nopath_1_0_1_0(op_60v1)
                    };
                    let op_59v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_,)| ((row.0,), ()),
                        op_60v1,
                    );
                    let op_59v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_59v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_59v1__map__loc_nopath_1_0_1_0(op_59v1)
                    };
                    let op_4v1 = dfir_rs::pusherator::tee::Tee::new(
                        hoff_29v3_send,
                        dfir_rs::pusherator::tee::Tee::new(
                            hoff_23v3_send,
                            dfir_rs::pusherator::tee::Tee::new(
                                op_59v1,
                                dfir_rs::pusherator::tee::Tee::new(
                                    op_64v1,
                                    hoff_25v3_send,
                                ),
                            ),
                        ),
                    );
                    let op_4v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_4v1__tee__loc_nopath_2_19_2_24<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_4v1__tee__loc_nopath_2_19_2_24(op_4v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_6v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_6v1(op_3v1, op_4v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(7v1)",
                1,
                var_expr!(hoff_16v3_recv, hoff_17v3_recv),
                var_expr!(hoff_13v3_send),
                false,
                move |
                    context,
                    var_args!(hoff_16v3_recv, hoff_17v3_recv),
                    var_args!(hoff_13v3_send)|
                {
                    let mut hoff_16v3_recv = hoff_16v3_recv.borrow_mut_swap();
                    let hoff_16v3_recv = hoff_16v3_recv.drain(..);
                    let mut hoff_17v3_recv = hoff_17v3_recv.borrow_mut_swap();
                    let hoff_17v3_recv = hoff_17v3_recv.drain(..);
                    let hoff_13v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_13v3_send.give(Some(v));
                    });
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_65v1 = hoff_17v3_recv.map(|(g, a): ((_,), _)| (g.0,));
                    let op_65v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_65v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_65v1__map__loc_nopath_1_0_1_0(op_65v1)
                    };
                    let op_30v1 = op_65v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_7v1_node_30v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_30v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_30v1__unique__loc_nopath_21_21_21_41<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_30v1__unique__loc_nopath_21_21_21_41(op_30v1)
                    };
                    let op_30v1 = op_30v1.map(|k| (k, ()));
                    let mut sg_7v1_node_31v1_antijoindata_neg_borrow = context
                        .state_ref(sg_7v1_node_31v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_7v1_node_31v1_antijoindata_pos_borrow = context
                        .state_ref(sg_7v1_node_31v1_antijoindata_pos)
                        .borrow_mut();
                    let op_31v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_16v3_recv,
                            op_30v1,
                            &mut *sg_7v1_node_31v1_antijoindata_neg_borrow,
                            &mut *sg_7v1_node_31v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_31v1 = op_31v1.map(|(k, ())| k);
                    let op_31v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_31v1__difference__loc_nopath_21_21_21_41<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_31v1__difference__loc_nopath_21_21_21_41(op_31v1)
                    };
                    let op_40v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result4.send(v).unwrap()
                    });
                    let op_40v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_40v1__for_each__loc_nopath_13_29_13_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_40v1__for_each__loc_nopath_13_29_13_67(op_40v1)
                    };
                    let op_24v1 = dfir_rs::pusherator::filter::Filter::new(
                        |item| {
                            let mut borrow = context
                                .state_ref(sg_7v1_node_24v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        },
                        op_40v1,
                    );
                    let op_24v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_24v1__unique__loc_nopath_13_20_13_27<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_24v1__unique__loc_nopath_13_20_13_27(op_24v1)
                    };
                    let mut sg_7v1_node_68v1_persistvec = context
                        .state_ref(singleton_op_68v1)
                        .borrow_mut();
                    let op_68v1 = {
                        fn constrain_types<'ctx, Push, Item>(
                            vec: &'ctx mut Vec<Item>,
                            mut output: Push,
                            is_new_tick: bool,
                        ) -> impl 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>
                        where
                            Push: 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>,
                            Item: ::std::clone::Clone,
                        {
                            if is_new_tick {
                                vec.iter()
                                    .cloned()
                                    .for_each(|item| {
                                        dfir_rs::pusherator::Pusherator::give(&mut output, item);
                                    });
                            }
                            dfir_rs::pusherator::map::Map::new(
                                |item| {
                                    vec.push(item);
                                    vec.last().unwrap().clone()
                                },
                                output,
                            )
                        }
                        constrain_types(
                            &mut *sg_7v1_node_68v1_persistvec,
                            op_24v1,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_68v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_68v1__persist__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_68v1__persist__loc_nopath_1_0_1_0(op_68v1)
                    };
                    let op_67v1 = dfir_rs::pusherator::map::Map::new(
                        |(g, a): ((_,), _)| (g.0,),
                        op_68v1,
                    );
                    let op_67v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_67v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_67v1__map__loc_nopath_1_0_1_0(op_67v1)
                    };
                    let op_66v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_,)| ((row.0,), ()),
                        op_67v1,
                    );
                    let op_66v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_66v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_66v1__map__loc_nopath_1_0_1_0(op_66v1)
                    };
                    let op_32v1 = dfir_rs::pusherator::tee::Tee::new(
                        op_66v1,
                        hoff_13v3_send,
                    );
                    let op_32v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_32v1__tee__loc_nopath_21_21_21_41<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_32v1__tee__loc_nopath_21_21_21_41(op_32v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_7v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_7v1(op_31v1, op_32v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(8v1)",
                1,
                var_expr!(hoff_11v3_recv, hoff_22v3_recv),
                var_expr!(hoff_19v3_send, hoff_20v3_send, hoff_26v3_send),
                false,
                move |
                    context,
                    var_args!(hoff_11v3_recv, hoff_22v3_recv),
                    var_args!(hoff_19v3_send, hoff_20v3_send, hoff_26v3_send)|
                {
                    let mut hoff_11v3_recv = hoff_11v3_recv.borrow_mut_swap();
                    let hoff_11v3_recv = hoff_11v3_recv.drain(..);
                    let mut hoff_22v3_recv = hoff_22v3_recv.borrow_mut_swap();
                    let hoff_22v3_recv = hoff_22v3_recv.drain(..);
                    let hoff_19v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_19v3_send.give(Some(v));
                    });
                    let hoff_20v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_20v3_send.give(Some(v));
                    });
                    let hoff_26v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_26v3_send.give(Some(v));
                    });
                    let op_7v1 = hoff_11v3_recv
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_8v1_node_7v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_7v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_7v1__unique__loc_nopath_5_19_5_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_7v1__unique__loc_nopath_5_19_5_24(op_7v1)
                    };
                    let op_7v1 = op_7v1.map(|k| (k, ()));
                    let mut sg_8v1_node_8v1_antijoindata_neg_borrow = context
                        .state_ref(sg_8v1_node_8v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_8v1_node_8v1_antijoindata_pos_borrow = context
                        .state_ref(sg_8v1_node_8v1_antijoindata_pos)
                        .borrow_mut();
                    let op_8v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_22v3_recv,
                            op_7v1,
                            &mut *sg_8v1_node_8v1_antijoindata_neg_borrow,
                            &mut *sg_8v1_node_8v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_8v1 = op_8v1.map(|(k, ())| k);
                    let op_8v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_8v1__difference__loc_nopath_5_19_5_24<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_8v1__difference__loc_nopath_5_19_5_24(op_8v1)
                    };
                    let op_56v1 = dfir_rs::pusherator::map::Map::new(
                        |_v: (_,)| (_v.0,),
                        hoff_20v3_send,
                    );
                    let op_56v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_56v1__map__loc_nopath_16_37_16_45<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_56v1__map__loc_nopath_16_37_16_45(op_56v1)
                    };
                    let mut sg_8v1_node_55v1_persistvec = context
                        .state_ref(singleton_op_55v1)
                        .borrow_mut();
                    let op_55v1 = {
                        fn constrain_types<'ctx, Push, Item>(
                            vec: &'ctx mut Vec<Item>,
                            mut output: Push,
                            is_new_tick: bool,
                        ) -> impl 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>
                        where
                            Push: 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>,
                            Item: ::std::clone::Clone,
                        {
                            if is_new_tick {
                                vec.iter()
                                    .cloned()
                                    .for_each(|item| {
                                        dfir_rs::pusherator::Pusherator::give(&mut output, item);
                                    });
                            }
                            dfir_rs::pusherator::map::Map::new(
                                |item| {
                                    vec.push(item);
                                    vec.last().unwrap().clone()
                                },
                                output,
                            )
                        }
                        constrain_types(
                            &mut *sg_8v1_node_55v1_persistvec,
                            op_56v1,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_55v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_55v1__persist__loc_nopath_16_37_16_45<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_55v1__persist__loc_nopath_16_37_16_45(op_55v1)
                    };
                    let op_9v1 = dfir_rs::pusherator::tee::Tee::new(
                        hoff_26v3_send,
                        dfir_rs::pusherator::tee::Tee::new(op_55v1, hoff_19v3_send),
                    );
                    let op_9v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_9v1__tee__loc_nopath_5_19_5_24<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_9v1__tee__loc_nopath_5_19_5_24(op_9v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_8v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_8v1(op_8v1, op_9v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df
        }
    }
}
