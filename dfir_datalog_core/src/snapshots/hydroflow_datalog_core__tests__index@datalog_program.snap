---
source: dfir_datalog_core/src/lib.rs
expression: "prettyplease :: unparse(& wrapped)"
---
fn main() {
    {
        #[allow(unused_qualifications)]
        {
            use dfir_rs::{var_expr, var_args};
            let mut df = dfir_rs::scheduled::graph::dfir_rs::new();
            df.__assign_meta_graph(
                "{\"nodes\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":null,\"version\":2},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"defer_tick ()\"},\"version\":1},{\"value\":{\"Handoff\":{}},\"version\":3},{\"value\":{\"Operator\":\"unique :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"difference :: < 'tick , 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"tee ()\"},\"version\":1},{\"value\":{\"Operator\":\"defer_tick ()\"},\"version\":1},{\"value\":{\"Operator\":\"source_stream (ints)\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result2 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result3 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result4 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"for_each (| v | result5 . send (v) . unwrap ())\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"enumerate :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (__enumerate_index , (g , a)) : (_ , ((_ , _ ,) , _)) | (g . 0 , g . 1 , __enumerate_index ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 ,) , ((row . 1) ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"fold_keyed :: < 'tick , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let prev : (hydroflow :: rustc_hash :: FxHashSet < _ > , _) = prev ; let mut set : hydroflow :: rustc_hash :: FxHashSet < _ > = prev . 0 ; if set . insert (val . 0) { (set , prev . 1 + 1) } else { (set , prev . 1) } }) } else { Some ({ let mut set = hydroflow :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; (set , 1) }) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"enumerate :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (__enumerate_index , (g , a)) : (_ , ((_ ,) , _)) | (g . 0 , a . 0 . unwrap () . 1 , __enumerate_index ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (g , a) : ((_ , _ ,) , _) | (g . 0 , g . 1 ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"enumerate :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (__enumerate_index , (g , a)) : (_ , ((_ , _ ,) , _)) | (g . 0 , g . 1 , __enumerate_index ,))\"},\"version\":1},{\"value\":{\"Operator\":\"persist :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 ,) , ((row . 1) ,)))\"},\"version\":1},{\"value\":{\"Operator\":\"fold_keyed :: < 'static , (_ ,) , (Option < _ > ,) > (| | (None ,) , | old : & mut (Option < _ > ,) , val : (_ ,) | { old . 0 = if let Some (prev) = old . 0 . take () { Some ({ let prev : (hydroflow :: rustc_hash :: FxHashSet < _ > , _) = prev ; let mut set : hydroflow :: rustc_hash :: FxHashSet < _ > = prev . 0 ; if set . insert (val . 0) { (set , prev . 1 + 1) } else { (set , prev . 1) } }) } else { Some ({ let mut set = hydroflow :: rustc_hash :: FxHashSet :: < _ > :: default () ; set . insert (val . 0) ; (set , 1) }) } ; })\"},\"version\":1},{\"value\":{\"Operator\":\"enumerate :: < 'tick > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (__enumerate_index , (g , a)) : (_ , ((_ ,) , _)) | (g . 0 , a . 0 . unwrap () . 1 , __enumerate_index ,))\"},\"version\":1},{\"value\":{\"Operator\":\"map (| row : (_ , _ ,) | ((row . 0 , row . 1 ,) , ()))\"},\"version\":1},{\"value\":{\"Operator\":\"enumerate :: < 'static > ()\"},\"version\":1},{\"value\":{\"Operator\":\"map (| (__enumerate_index , (g , a)) : (_ , ((_ , _ ,) , _)) | (g . 0 , g . 1 , __enumerate_index ,))\"},\"version\":1}],\"graph\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":2,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":35,\"version\":1},{\"idx\":5,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":6,\"version\":3},{\"idx\":25,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":39,\"version\":1},{\"idx\":8,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":9,\"version\":3},{\"idx\":23,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":45,\"version\":1},{\"idx\":11,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":12,\"version\":3},{\"idx\":20,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":49,\"version\":1},{\"idx\":14,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":15,\"version\":3},{\"idx\":18,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":52,\"version\":1},{\"idx\":17,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":18,\"version\":1},{\"idx\":19,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":17,\"version\":1},{\"idx\":18,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":20,\"version\":1},{\"idx\":15,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":19,\"version\":1},{\"idx\":12,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":41,\"version\":1},{\"idx\":22,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":23,\"version\":1},{\"idx\":24,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":22,\"version\":1},{\"idx\":23,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":25,\"version\":1},{\"idx\":9,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":6,\"version\":3}],\"version\":3},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":5,\"version\":1},{\"idx\":27,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":8,\"version\":1},{\"idx\":28,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":11,\"version\":1},{\"idx\":29,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":14,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":31,\"version\":1},{\"idx\":32,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":19,\"version\":1},{\"idx\":31,\"version\":1}],\"version\":1},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":34,\"version\":1},{\"idx\":35,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":33,\"version\":1},{\"idx\":34,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":33,\"version\":1}],\"version\":1},{\"value\":null,\"version\":2},{\"value\":[{\"idx\":38,\"version\":1},{\"idx\":39,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":37,\"version\":1},{\"idx\":38,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":36,\"version\":1},{\"idx\":21,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":36,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":21,\"version\":3},{\"idx\":37,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":40,\"version\":1},{\"idx\":16,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":3,\"version\":1},{\"idx\":40,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":10,\"version\":3},{\"idx\":51,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":44,\"version\":1},{\"idx\":45,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":42,\"version\":1},{\"idx\":43,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":42,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":13,\"version\":3},{\"idx\":47,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":48,\"version\":1},{\"idx\":49,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":47,\"version\":1},{\"idx\":48,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":46,\"version\":1},{\"idx\":13,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":46,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":16,\"version\":3},{\"idx\":41,\"version\":1}],\"version\":3},{\"value\":[{\"idx\":51,\"version\":1},{\"idx\":52,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":50,\"version\":1},{\"idx\":10,\"version\":3}],\"version\":3},{\"value\":[{\"idx\":24,\"version\":1},{\"idx\":50,\"version\":1}],\"version\":1}],\"ports\":[{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",{\"Path\":\"neg\"}],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",{\"Path\":\"pos\"}],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":1},{\"value\":null,\"version\":0},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"2\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[{\"Int\":\"0\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"1\"},\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[\"Elided\",\"Elided\"],\"version\":1},{\"value\":[\"Elided\",\"Elided\"],\"version\":3},{\"value\":[{\"Int\":\"2\"},\"Elided\"],\"version\":1}],\"node_loops\":[{\"value\":null,\"version\":0}],\"loop_nodes\":[{\"value\":null,\"version\":0}],\"loop_parent\":[{\"value\":null,\"version\":0}],\"loop_children\":[{\"value\":null,\"version\":0}],\"node_subgraph\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":1,\"version\":1},\"version\":1},{\"value\":null,\"version\":0},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":2,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":4,\"version\":1},\"version\":1},{\"value\":{\"idx\":3,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":6,\"version\":1},\"version\":1},{\"value\":{\"idx\":5,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1},{\"value\":{\"idx\":7,\"version\":1},\"version\":1}],\"subgraph_nodes\":[{\"value\":null,\"version\":0},{\"value\":[{\"idx\":20,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":25,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":26,\"version\":1},{\"idx\":2,\"version\":1},{\"idx\":3,\"version\":1},{\"idx\":33,\"version\":1},{\"idx\":34,\"version\":1},{\"idx\":35,\"version\":1},{\"idx\":5,\"version\":1},{\"idx\":27,\"version\":1},{\"idx\":36,\"version\":1},{\"idx\":40,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":37,\"version\":1},{\"idx\":38,\"version\":1},{\"idx\":39,\"version\":1},{\"idx\":8,\"version\":1},{\"idx\":28,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":41,\"version\":1},{\"idx\":22,\"version\":1},{\"idx\":23,\"version\":1},{\"idx\":24,\"version\":1},{\"idx\":42,\"version\":1},{\"idx\":43,\"version\":1},{\"idx\":44,\"version\":1},{\"idx\":45,\"version\":1},{\"idx\":11,\"version\":1},{\"idx\":29,\"version\":1},{\"idx\":46,\"version\":1},{\"idx\":50,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":47,\"version\":1},{\"idx\":48,\"version\":1},{\"idx\":49,\"version\":1},{\"idx\":14,\"version\":1},{\"idx\":30,\"version\":1}],\"version\":1},{\"value\":[{\"idx\":51,\"version\":1},{\"idx\":52,\"version\":1},{\"idx\":17,\"version\":1},{\"idx\":18,\"version\":1},{\"idx\":19,\"version\":1},{\"idx\":31,\"version\":1},{\"idx\":32,\"version\":1}],\"version\":1}],\"subgraph_stratum\":[{\"value\":null,\"version\":0},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":0,\"version\":1},{\"value\":1,\"version\":1},{\"value\":1,\"version\":1},{\"value\":2,\"version\":1},{\"value\":1,\"version\":1}],\"node_singleton_references\":[{\"value\":null,\"version\":0},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1},{\"value\":[],\"version\":1}],\"node_varnames\":[{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints_insert\",\"version\":1},{\"value\":\"ints\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":\"result_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result2_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result3_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result4_insert\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"result5_insert\",\"version\":1},{\"value\":\"result5\",\"version\":1},{\"value\":\"result5\",\"version\":1},{\"value\":null,\"version\":0},{\"value\":null,\"version\":0},{\"value\":\"ints_persisted_insert\",\"version\":1},{\"value\":\"ints_persisted\",\"version\":1},{\"value\":\"ints_persisted\",\"version\":1}],\"subgraph_laziness\":[{\"value\":null,\"version\":0}]}",
            );
            df.__assign_diagnostics("[]");
            let (hoff_6v3_send, hoff_6v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(6v3)");
            let (hoff_9v3_send, hoff_9v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(9v3)");
            let (hoff_10v3_send, hoff_10v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(10v3)");
            let (hoff_12v3_send, hoff_12v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(12v3)");
            let (hoff_13v3_send, hoff_13v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(13v3)");
            let (hoff_15v3_send, hoff_15v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(15v3)");
            let (hoff_16v3_send, hoff_16v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(16v3)");
            let (hoff_21v3_send, hoff_21v3_recv) = df
                .make_edge::<
                    _,
                    dfir_rs::scheduled::handoff::VecHandoff<_>,
                >("handoff GraphNodeId(21v3)");
            let mut sg_3v1_node_26v1_stream = {
                #[inline(always)]
                fn check_stream<
                    Stream: dfir_rs::futures::stream::Stream<Item = Item>
                        + ::std::marker::Unpin,
                    Item,
                >(
                    stream: Stream,
                ) -> impl dfir_rs::futures::stream::Stream<
                    Item = Item,
                > + ::std::marker::Unpin {
                    stream
                }
                check_stream(ints)
            };
            let sg_3v1_node_2v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_3v1_node_5v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_3v1_node_34v1_counterdata = df
                .add_state(::std::cell::RefCell::new(0..));
            df.set_state_tick_hook(
                sg_3v1_node_34v1_counterdata,
                |rcell| {
                    rcell.replace(0..);
                },
            );
            let sg_4v1_node_37v1_groupbydata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::rustc_hash::FxHashMap::<(_,), (Option<_>,)>::default(),
                    ),
                );
            let sg_4v1_node_38v1_counterdata = df
                .add_state(::std::cell::RefCell::new(0..));
            df.set_state_tick_hook(
                sg_4v1_node_38v1_counterdata,
                |rcell| {
                    rcell.replace(0..);
                },
            );
            let sg_4v1_node_8v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_5v1_node_22v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_5v1_node_23v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(dfir_rs::rustc_hash::FxHashSet::default()),
                );
            let sg_5v1_node_23v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_5v1_node_11v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_45v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            let sg_5v1_node_43v1_counterdata = df
                .add_state(::std::cell::RefCell::new(0..));
            let sg_6v1_node_47v1_groupbydata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::rustc_hash::FxHashMap::<(_,), (Option<_>,)>::default(),
                    ),
                );
            let sg_6v1_node_48v1_counterdata = df
                .add_state(::std::cell::RefCell::new(0..));
            df.set_state_tick_hook(
                sg_6v1_node_48v1_counterdata,
                |rcell| {
                    rcell.replace(0..);
                },
            );
            let sg_6v1_node_14v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_7v1_node_51v1_counterdata = df
                .add_state(::std::cell::RefCell::new(0..));
            let sg_7v1_node_17v1_uniquedata = df
                .add_state(
                    ::std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let sg_7v1_node_18v1_antijoindata_neg = df
                .add_state(
                    std::cell::RefCell::new(dfir_rs::rustc_hash::FxHashSet::default()),
                );
            let sg_7v1_node_18v1_antijoindata_pos = df
                .add_state(
                    std::cell::RefCell::new(
                        dfir_rs::util::monotonic_map::MonotonicMap::<
                            _,
                            dfir_rs::rustc_hash::FxHashSet<_>,
                        >::default(),
                    ),
                );
            let singleton_op_31v1 = df
                .add_state(::std::cell::RefCell::new(::std::vec::Vec::new()));
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(3v1)",
                0,
                var_expr!(),
                var_expr!(hoff_16v3_send, hoff_21v3_send),
                false,
                move |context, var_args!(), var_args!(hoff_16v3_send, hoff_21v3_send)| {
                    let hoff_16v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_16v3_send.give(Some(v));
                    });
                    let hoff_21v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_21v3_send.give(Some(v));
                    });
                    let op_26v1 = std::iter::from_fn(|| {
                        match dfir_rs::futures::stream::Stream::poll_next(
                            ::std::pin::Pin::new(&mut sg_3v1_node_26v1_stream),
                            &mut std::task::Context::from_waker(&context.waker()),
                        ) {
                            std::task::Poll::Ready(maybe) => maybe,
                            std::task::Poll::Pending => None,
                        }
                    });
                    let op_26v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_26v1__source_stream__loc_nopath_2_25_2_44<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_26v1__source_stream__loc_nopath_2_25_2_44(op_26v1)
                    };
                    let op_2v1 = op_26v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_3v1_node_2v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_2v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_2v1__unique__loc_nopath_2_19_2_23<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_2v1__unique__loc_nopath_2_19_2_23(op_2v1)
                    };
                    let op_40v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0, row.1), ()),
                        hoff_16v3_send,
                    );
                    let op_40v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_40v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_40v1__map__loc_nopath_1_0_1_0(op_40v1)
                    };
                    let op_36v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0,), ((row.1),)),
                        hoff_21v3_send,
                    );
                    let op_36v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_36v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_36v1__map__loc_nopath_1_0_1_0(op_36v1)
                    };
                    let op_27v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result.send(v).unwrap()
                    });
                    let op_27v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_27v1__for_each__loc_nopath_4_28_4_65<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_27v1__for_each__loc_nopath_4_28_4_65(op_27v1)
                    };
                    let op_5v1 = dfir_rs::pusherator::filter::Filter::new(
                        |item| {
                            let mut borrow = context
                                .state_ref(sg_3v1_node_5v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        },
                        op_27v1,
                    );
                    let op_5v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_5v1__unique__loc_nopath_4_20_4_26<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_5v1__unique__loc_nopath_4_20_4_26(op_5v1)
                    };
                    let op_35v1 = dfir_rs::pusherator::map::Map::new(
                        |(__enumerate_index, (g, a)): (_, ((_, _), _))| (
                            g.0,
                            g.1,
                            __enumerate_index,
                        ),
                        op_5v1,
                    );
                    let op_35v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_35v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_35v1__map__loc_nopath_1_0_1_0(op_35v1)
                    };
                    let op_34v1 = dfir_rs::pusherator::map::Map::new(
                        |item| {
                            let mut counter = context
                                .state_ref(sg_3v1_node_34v1_counterdata)
                                .borrow_mut();
                            (counter.next().unwrap(), item)
                        },
                        op_35v1,
                    );
                    let op_34v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_34v1__enumerate__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_34v1__enumerate__loc_nopath_1_0_1_0(op_34v1)
                    };
                    let op_33v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0, row.1), ()),
                        op_34v1,
                    );
                    let op_33v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_33v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_33v1__map__loc_nopath_1_0_1_0(op_33v1)
                    };
                    let op_3v1 = dfir_rs::pusherator::tee::Tee::new(
                        op_33v1,
                        dfir_rs::pusherator::tee::Tee::new(op_36v1, op_40v1),
                    );
                    let op_3v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_3v1__tee__loc_nopath_2_19_2_23<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_3v1__tee__loc_nopath_2_19_2_23(op_3v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_3v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_3v1(op_2v1, op_3v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(1v1)",
                0,
                var_expr!(hoff_12v3_recv),
                var_expr!(hoff_15v3_send),
                false,
                move |context, var_args!(hoff_12v3_recv), var_args!(hoff_15v3_send)| {
                    let mut hoff_12v3_recv = hoff_12v3_recv.borrow_mut_swap();
                    let hoff_12v3_recv = hoff_12v3_recv.drain(..);
                    let hoff_15v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_15v3_send.give(Some(v));
                    });
                    let op_20v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_12v3_recv)
                    };
                    let op_20v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_20v1__defer_tick__loc_nopath_9_21_9_28<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_20v1__defer_tick__loc_nopath_9_21_9_28(op_20v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_1v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_1v1(op_20v1, hoff_15v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(2v1)",
                0,
                var_expr!(hoff_6v3_recv),
                var_expr!(hoff_9v3_send),
                false,
                move |context, var_args!(hoff_6v3_recv), var_args!(hoff_9v3_send)| {
                    let mut hoff_6v3_recv = hoff_6v3_recv.borrow_mut_swap();
                    let hoff_6v3_recv = hoff_6v3_recv.drain(..);
                    let hoff_9v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_9v3_send.give(Some(v));
                    });
                    let op_25v1 = {
                        fn check_input<Iter: ::std::iter::Iterator<Item = Item>, Item>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = Item> {
                            iter
                        }
                        check_input::<_, _>(hoff_6v3_recv)
                    };
                    let op_25v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_25v1__defer_tick__loc_nopath_15_21_15_35<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_25v1__defer_tick__loc_nopath_15_21_15_35(op_25v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_2v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_2v1(op_25v1, hoff_9v3_send);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(4v1)",
                1,
                var_expr!(hoff_21v3_recv),
                var_expr!(),
                false,
                move |context, var_args!(hoff_21v3_recv), var_args!()| {
                    let mut hoff_21v3_recv = hoff_21v3_recv.borrow_mut_swap();
                    let hoff_21v3_recv = hoff_21v3_recv.drain(..);
                    let mut sg_4v1_node_37v1_hashtable = context
                        .state_ref(sg_4v1_node_37v1_groupbydata)
                        .borrow_mut();
                    {
                        #[inline(always)]
                        fn check_input<Iter, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)>
                        where
                            Iter: std::iter::Iterator<Item = (A, B)>,
                            A: ::std::clone::Clone,
                            B: ::std::clone::Clone,
                        {
                            iter
                        }
                        /// A: accumulator type
                        /// T: iterator item type
                        /// O: output type
                        #[inline(always)]
                        fn call_comb_type<A, T, O>(
                            a: &mut A,
                            t: T,
                            f: impl Fn(&mut A, T) -> O,
                        ) -> O {
                            (f)(a, t)
                        }
                        for kv in check_input(hoff_21v3_recv) {
                            #[allow(unknown_lints, clippy::unwrap_or_default)]
                            let entry = sg_4v1_node_37v1_hashtable
                                .entry(kv.0)
                                .or_insert_with(|| (None,));
                            #[allow(clippy::redundant_closure_call)]
                            call_comb_type(
                                entry,
                                kv.1,
                                |old: &mut (Option<_>,), val: (_,)| {
                                    old.0 = if let Some(prev) = old.0.take() {
                                        Some({
                                            let prev: (dfir_rs::rustc_hash::FxHashSet<_>, _) = prev;
                                            let mut set: dfir_rs::rustc_hash::FxHashSet<_> = prev.0;
                                            if set.insert(val.0) {
                                                (set, prev.1 + 1)
                                            } else {
                                                (set, prev.1)
                                            }
                                        })
                                    } else {
                                        Some({
                                            let mut set = dfir_rs::rustc_hash::FxHashSet::<
                                                _,
                                            >::default();
                                            set.insert(val.0);
                                            (set, 1)
                                        })
                                    };
                                },
                            );
                        }
                    }
                    let op_37v1 = sg_4v1_node_37v1_hashtable.drain();
                    let op_37v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_37v1__fold_keyed__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_37v1__fold_keyed__loc_nopath_1_0_1_0(op_37v1)
                    };
                    let op_38v1 = ::std::iter::Iterator::map(
                        op_37v1,
                        |item| {
                            let mut counter = context
                                .state_ref(sg_4v1_node_38v1_counterdata)
                                .borrow_mut();
                            (counter.next().unwrap(), item)
                        },
                    );
                    let op_38v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_38v1__enumerate__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_38v1__enumerate__loc_nopath_1_0_1_0(op_38v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_39v1 = op_38v1
                        .map(|(__enumerate_index, (g, a)): (_, ((_,), _))| (
                            g.0,
                            a.0.unwrap().1,
                            __enumerate_index,
                        ));
                    let op_39v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_39v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_39v1__map__loc_nopath_1_0_1_0(op_39v1)
                    };
                    let op_8v1 = op_39v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_4v1_node_8v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_8v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_8v1__unique__loc_nopath_5_20_5_27<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_8v1__unique__loc_nopath_5_20_5_27(op_8v1)
                    };
                    let op_28v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result2.send(v).unwrap()
                    });
                    let op_28v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_28v1__for_each__loc_nopath_5_29_5_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_28v1__for_each__loc_nopath_5_29_5_67(op_28v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_4v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_4v1(op_8v1, op_28v1);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(5v1)",
                1,
                var_expr!(hoff_9v3_recv, hoff_16v3_recv),
                var_expr!(hoff_6v3_send, hoff_10v3_send, hoff_13v3_send),
                false,
                move |
                    context,
                    var_args!(hoff_9v3_recv, hoff_16v3_recv),
                    var_args!(hoff_6v3_send, hoff_10v3_send, hoff_13v3_send)|
                {
                    let mut hoff_9v3_recv = hoff_9v3_recv.borrow_mut_swap();
                    let hoff_9v3_recv = hoff_9v3_recv.drain(..);
                    let mut hoff_16v3_recv = hoff_16v3_recv.borrow_mut_swap();
                    let hoff_16v3_recv = hoff_16v3_recv.drain(..);
                    let hoff_6v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_6v3_send.give(Some(v));
                    });
                    let hoff_10v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_10v3_send.give(Some(v));
                    });
                    let hoff_13v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_13v3_send.give(Some(v));
                    });
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_41v1 = hoff_16v3_recv.map(|(g, a): ((_, _), _)| (g.0, g.1));
                    let op_41v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_41v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_41v1__map__loc_nopath_1_0_1_0(op_41v1)
                    };
                    let op_22v1 = op_41v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_5v1_node_22v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_22v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_22v1__unique__loc_nopath_15_21_15_35<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_22v1__unique__loc_nopath_15_21_15_35(op_22v1)
                    };
                    let op_22v1 = op_22v1.map(|k| (k, ()));
                    let mut sg_5v1_node_23v1_antijoindata_neg_borrow = context
                        .state_ref(sg_5v1_node_23v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_5v1_node_23v1_antijoindata_pos_borrow = context
                        .state_ref(sg_5v1_node_23v1_antijoindata_pos)
                        .borrow_mut();
                    let op_23v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_9v3_recv,
                            op_22v1,
                            &mut *sg_5v1_node_23v1_antijoindata_neg_borrow,
                            &mut *sg_5v1_node_23v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_23v1 = op_23v1.map(|(k, ())| k);
                    let op_23v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_23v1__difference__loc_nopath_15_21_15_35<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_23v1__difference__loc_nopath_15_21_15_35(op_23v1)
                    };
                    let op_50v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0, row.1), ()),
                        hoff_10v3_send,
                    );
                    let op_50v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_50v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_50v1__map__loc_nopath_1_0_1_0(op_50v1)
                    };
                    let op_46v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0,), ((row.1),)),
                        hoff_13v3_send,
                    );
                    let op_46v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_46v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_46v1__map__loc_nopath_1_0_1_0(op_46v1)
                    };
                    let op_29v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result3.send(v).unwrap()
                    });
                    let op_29v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_29v1__for_each__loc_nopath_6_29_6_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_29v1__for_each__loc_nopath_6_29_6_67(op_29v1)
                    };
                    let op_11v1 = dfir_rs::pusherator::filter::Filter::new(
                        |item| {
                            let mut borrow = context
                                .state_ref(sg_5v1_node_11v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        },
                        op_29v1,
                    );
                    let op_11v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_11v1__unique__loc_nopath_6_20_6_27<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_11v1__unique__loc_nopath_6_20_6_27(op_11v1)
                    };
                    let mut sg_5v1_node_45v1_persistvec = context
                        .state_ref(singleton_op_45v1)
                        .borrow_mut();
                    let op_45v1 = {
                        fn constrain_types<'ctx, Push, Item>(
                            vec: &'ctx mut Vec<Item>,
                            mut output: Push,
                            is_new_tick: bool,
                        ) -> impl 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>
                        where
                            Push: 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>,
                            Item: ::std::clone::Clone,
                        {
                            if is_new_tick {
                                vec.iter()
                                    .cloned()
                                    .for_each(|item| {
                                        dfir_rs::pusherator::Pusherator::give(&mut output, item);
                                    });
                            }
                            dfir_rs::pusherator::map::Map::new(
                                |item| {
                                    vec.push(item);
                                    vec.last().unwrap().clone()
                                },
                                output,
                            )
                        }
                        constrain_types(
                            &mut *sg_5v1_node_45v1_persistvec,
                            op_11v1,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_45v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_45v1__persist__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_45v1__persist__loc_nopath_1_0_1_0(op_45v1)
                    };
                    let op_44v1 = dfir_rs::pusherator::map::Map::new(
                        |(__enumerate_index, (g, a)): (_, ((_, _), _))| (
                            g.0,
                            g.1,
                            __enumerate_index,
                        ),
                        op_45v1,
                    );
                    let op_44v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_44v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_44v1__map__loc_nopath_1_0_1_0(op_44v1)
                    };
                    let op_43v1 = dfir_rs::pusherator::map::Map::new(
                        |item| {
                            let mut counter = context
                                .state_ref(sg_5v1_node_43v1_counterdata)
                                .borrow_mut();
                            (counter.next().unwrap(), item)
                        },
                        op_44v1,
                    );
                    let op_43v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_43v1__enumerate__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_43v1__enumerate__loc_nopath_1_0_1_0(op_43v1)
                    };
                    let op_42v1 = dfir_rs::pusherator::map::Map::new(
                        |row: (_, _)| ((row.0, row.1), ()),
                        op_43v1,
                    );
                    let op_42v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_42v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_42v1__map__loc_nopath_1_0_1_0(op_42v1)
                    };
                    let op_24v1 = dfir_rs::pusherator::tee::Tee::new(
                        op_42v1,
                        dfir_rs::pusherator::tee::Tee::new(
                            op_46v1,
                            dfir_rs::pusherator::tee::Tee::new(op_50v1, hoff_6v3_send),
                        ),
                    );
                    let op_24v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_24v1__tee__loc_nopath_15_21_15_35<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_24v1__tee__loc_nopath_15_21_15_35(op_24v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_5v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_5v1(op_23v1, op_24v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(6v1)",
                2,
                var_expr!(hoff_13v3_recv),
                var_expr!(),
                false,
                move |context, var_args!(hoff_13v3_recv), var_args!()| {
                    let mut hoff_13v3_recv = hoff_13v3_recv.borrow_mut_swap();
                    let hoff_13v3_recv = hoff_13v3_recv.drain(..);
                    let mut sg_6v1_node_47v1_hashtable = context
                        .state_ref(sg_6v1_node_47v1_groupbydata)
                        .borrow_mut();
                    {
                        #[inline(always)]
                        fn check_input<Iter, A, B>(
                            iter: Iter,
                        ) -> impl ::std::iter::Iterator<Item = (A, B)>
                        where
                            Iter: std::iter::Iterator<Item = (A, B)>,
                            A: ::std::clone::Clone,
                            B: ::std::clone::Clone,
                        {
                            iter
                        }
                        /// A: accumulator type
                        /// T: iterator item type
                        /// O: output type
                        #[inline(always)]
                        fn call_comb_type<A, T, O>(
                            a: &mut A,
                            t: T,
                            f: impl Fn(&mut A, T) -> O,
                        ) -> O {
                            (f)(a, t)
                        }
                        for kv in check_input(hoff_13v3_recv) {
                            #[allow(unknown_lints, clippy::unwrap_or_default)]
                            let entry = sg_6v1_node_47v1_hashtable
                                .entry(kv.0)
                                .or_insert_with(|| (None,));
                            #[allow(clippy::redundant_closure_call)]
                            call_comb_type(
                                entry,
                                kv.1,
                                |old: &mut (Option<_>,), val: (_,)| {
                                    old.0 = if let Some(prev) = old.0.take() {
                                        Some({
                                            let prev: (dfir_rs::rustc_hash::FxHashSet<_>, _) = prev;
                                            let mut set: dfir_rs::rustc_hash::FxHashSet<_> = prev.0;
                                            if set.insert(val.0) {
                                                (set, prev.1 + 1)
                                            } else {
                                                (set, prev.1)
                                            }
                                        })
                                    } else {
                                        Some({
                                            let mut set = dfir_rs::rustc_hash::FxHashSet::<
                                                _,
                                            >::default();
                                            set.insert(val.0);
                                            (set, 1)
                                        })
                                    };
                                },
                            );
                        }
                    }
                    let op_47v1 = context
                        .is_first_run_this_tick()
                        .then_some(sg_6v1_node_47v1_hashtable.iter())
                        .into_iter()
                        .flatten()
                        .map(
                            #[allow(
                                unknown_lints,
                                suspicious_double_ref_op,
                                clippy::clone_on_copy
                            )]
                            |(k, v)| (
                                ::std::clone::Clone::clone(k),
                                ::std::clone::Clone::clone(v),
                            ),
                        );
                    let op_47v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_47v1__fold_keyed__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_47v1__fold_keyed__loc_nopath_1_0_1_0(op_47v1)
                    };
                    let op_48v1 = ::std::iter::Iterator::map(
                        op_47v1,
                        |item| {
                            let mut counter = context
                                .state_ref(sg_6v1_node_48v1_counterdata)
                                .borrow_mut();
                            (counter.next().unwrap(), item)
                        },
                    );
                    let op_48v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_48v1__enumerate__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_48v1__enumerate__loc_nopath_1_0_1_0(op_48v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_49v1 = op_48v1
                        .map(|(__enumerate_index, (g, a)): (_, ((_,), _))| (
                            g.0,
                            a.0.unwrap().1,
                            __enumerate_index,
                        ));
                    let op_49v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_49v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_49v1__map__loc_nopath_1_0_1_0(op_49v1)
                    };
                    let op_14v1 = op_49v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_6v1_node_14v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_14v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_14v1__unique__loc_nopath_7_20_7_27<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_14v1__unique__loc_nopath_7_20_7_27(op_14v1)
                    };
                    let op_30v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result4.send(v).unwrap()
                    });
                    let op_30v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_30v1__for_each__loc_nopath_7_29_7_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_30v1__for_each__loc_nopath_7_29_7_67(op_30v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_6v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_6v1(op_14v1, op_30v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df.add_subgraph_stratified(
                "Subgraph GraphSubgraphId(7v1)",
                1,
                var_expr!(hoff_10v3_recv, hoff_15v3_recv),
                var_expr!(hoff_12v3_send),
                false,
                move |
                    context,
                    var_args!(hoff_10v3_recv, hoff_15v3_recv),
                    var_args!(hoff_12v3_send)|
                {
                    let mut hoff_10v3_recv = hoff_10v3_recv.borrow_mut_swap();
                    let hoff_10v3_recv = hoff_10v3_recv.drain(..);
                    let mut hoff_15v3_recv = hoff_15v3_recv.borrow_mut_swap();
                    let hoff_15v3_recv = hoff_15v3_recv.drain(..);
                    let hoff_12v3_send = dfir_rs::pusherator::for_each::ForEach::new(|
                        v|
                    {
                        hoff_12v3_send.give(Some(v));
                    });
                    let op_51v1 = ::std::iter::Iterator::map(
                        hoff_10v3_recv,
                        |item| {
                            let mut counter = context
                                .state_ref(sg_7v1_node_51v1_counterdata)
                                .borrow_mut();
                            (counter.next().unwrap(), item)
                        },
                    );
                    let op_51v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_51v1__enumerate__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_51v1__enumerate__loc_nopath_1_0_1_0(op_51v1)
                    };
                    #[allow(
                        clippy::map_clone,
                        reason = "hydroflow has no explicit `cloned`/`copied` operator"
                    )]
                    let op_52v1 = op_51v1
                        .map(|(__enumerate_index, (g, a)): (_, ((_, _), _))| (
                            g.0,
                            g.1,
                            __enumerate_index,
                        ));
                    let op_52v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_52v1__map__loc_nopath_1_0_1_0<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_52v1__map__loc_nopath_1_0_1_0(op_52v1)
                    };
                    let op_17v1 = op_52v1
                        .filter(|item| {
                            let mut borrow = context
                                .state_ref(sg_7v1_node_17v1_uniquedata)
                                .borrow_mut();
                            let set = borrow
                                .get_mut_clear((
                                    context.current_tick(),
                                    context.current_stratum(),
                                ));
                            if !set.contains(item) {
                                set.insert(::std::clone::Clone::clone(item));
                                true
                            } else {
                                false
                            }
                        });
                    let op_17v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_17v1__unique__loc_nopath_9_21_9_28<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_17v1__unique__loc_nopath_9_21_9_28(op_17v1)
                    };
                    let op_17v1 = op_17v1.map(|k| (k, ()));
                    let mut sg_7v1_node_18v1_antijoindata_neg_borrow = context
                        .state_ref(sg_7v1_node_18v1_antijoindata_neg)
                        .borrow_mut();
                    let mut sg_7v1_node_18v1_antijoindata_pos_borrow = context
                        .state_ref(sg_7v1_node_18v1_antijoindata_pos)
                        .borrow_mut();
                    let op_18v1 = {
                        /// Limit error propagation by bounding locally, erasing output iterator type.
                        #[inline(always)]
                        fn check_inputs<'a, K, I1, V, I2>(
                            input_neg: I1,
                            input_pos: I2,
                            neg_state: &'a mut dfir_rs::rustc_hash::FxHashSet<K>,
                            pos_state: &'a mut dfir_rs::rustc_hash::FxHashSet<(K, V)>,
                            is_new_tick: bool,
                        ) -> impl 'a + Iterator<Item = (K, V)>
                        where
                            K: Eq + ::std::hash::Hash + Clone,
                            V: Eq + ::std::hash::Hash + Clone,
                            I1: 'a + Iterator<Item = K>,
                            I2: 'a + Iterator<Item = (K, V)>,
                        {
                            neg_state.extend(input_neg);
                            dfir_rs::compiled::pull::anti_join_into_iter(
                                input_pos,
                                neg_state,
                                pos_state,
                                is_new_tick,
                            )
                        }
                        check_inputs(
                            hoff_15v3_recv,
                            op_17v1,
                            &mut *sg_7v1_node_18v1_antijoindata_neg_borrow,
                            &mut *sg_7v1_node_18v1_antijoindata_pos_borrow
                                .get_mut_clear(context.current_tick()),
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_18v1 = op_18v1.map(|(k, ())| k);
                    let op_18v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_18v1__difference__loc_nopath_9_21_9_28<
                            Item,
                            Input: ::std::iter::Iterator<Item = Item>,
                        >(input: Input) -> impl ::std::iter::Iterator<Item = Item> {
                            #[repr(transparent)]
                            struct Pull<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: ::std::iter::Iterator<Item = Item>,
                            > Iterator for Pull<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn next(&mut self) -> Option<Self::Item> {
                                    self.inner.next()
                                }
                                #[inline(always)]
                                fn size_hint(&self) -> (usize, Option<usize>) {
                                    self.inner.size_hint()
                                }
                            }
                            Pull { inner: input }
                        }
                        op_18v1__difference__loc_nopath_9_21_9_28(op_18v1)
                    };
                    let op_32v1 = dfir_rs::pusherator::for_each::ForEach::new(|v| {
                        result5.send(v).unwrap()
                    });
                    let op_32v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_32v1__for_each__loc_nopath_10_29_10_67<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_32v1__for_each__loc_nopath_10_29_10_67(op_32v1)
                    };
                    let mut sg_7v1_node_31v1_persistvec = context
                        .state_ref(singleton_op_31v1)
                        .borrow_mut();
                    let op_31v1 = {
                        fn constrain_types<'ctx, Push, Item>(
                            vec: &'ctx mut Vec<Item>,
                            mut output: Push,
                            is_new_tick: bool,
                        ) -> impl 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>
                        where
                            Push: 'ctx + dfir_rs::pusherator::Pusherator<Item = Item>,
                            Item: ::std::clone::Clone,
                        {
                            if is_new_tick {
                                vec.iter()
                                    .cloned()
                                    .for_each(|item| {
                                        dfir_rs::pusherator::Pusherator::give(&mut output, item);
                                    });
                            }
                            dfir_rs::pusherator::map::Map::new(
                                |item| {
                                    vec.push(item);
                                    vec.last().unwrap().clone()
                                },
                                output,
                            )
                        }
                        constrain_types(
                            &mut *sg_7v1_node_31v1_persistvec,
                            op_32v1,
                            context.is_first_run_this_tick(),
                        )
                    };
                    let op_31v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_31v1__persist__loc_nopath_10_20_10_27<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_31v1__persist__loc_nopath_10_20_10_27(op_31v1)
                    };
                    let op_19v1 = dfir_rs::pusherator::tee::Tee::new(
                        op_31v1,
                        hoff_12v3_send,
                    );
                    let op_19v1 = {
                        #[allow(non_snake_case)]
                        #[inline(always)]
                        pub fn op_19v1__tee__loc_nopath_9_21_9_28<
                            Item,
                            Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                        >(
                            input: Input,
                        ) -> impl dfir_rs::pusherator::Pusherator<Item = Item> {
                            #[repr(transparent)]
                            struct Push<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > {
                                inner: Input,
                            }
                            impl<
                                Item,
                                Input: dfir_rs::pusherator::Pusherator<Item = Item>,
                            > dfir_rs::pusherator::Pusherator for Push<Item, Input> {
                                type Item = Item;
                                #[inline(always)]
                                fn give(&mut self, item: Self::Item) {
                                    self.inner.give(item)
                                }
                            }
                            Push { inner: input }
                        }
                        op_19v1__tee__loc_nopath_9_21_9_28(op_19v1)
                    };
                    #[inline(always)]
                    fn pivot_run_sg_7v1<
                        Pull: ::std::iter::Iterator<Item = Item>,
                        Push: dfir_rs::pusherator::Pusherator<Item = Item>,
                        Item,
                    >(pull: Pull, push: Push) {
                        dfir_rs::pusherator::pivot::Pivot::new(pull, push).run();
                    }
                    pivot_run_sg_7v1(op_18v1, op_19v1);
                    context.schedule_subgraph(context.current_subgraph(), false);
                },
            );
            df
        }
    }
}
